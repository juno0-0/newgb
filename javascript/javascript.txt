자바스크립트 언어란?
	1. 퍼즐 조각처럼 코드 형태로 HTML페이지에 내장된다.
	2. 컴파일 과정 없이 브라우저 내부의 인터프리터에 의해 실행된다.
		※ 인터프리터 : 자바스크립트 처리기
		※ 오류 발생 시 브라우저 개발자 모드(F12)의 console에서 확인할 수 있다.
			실행이 되지 않으면 console로 가서 확인해보자.

웹 페이지에서 자바스크립트의 역할
	웹 페이지는 3가지 코드가 결합되어 작성된다.
		※ 3가지 코드 : HTML(정보), CSS(디자인), JS(연산)
	사용자의 입력을 처리하거나 웹 애플리케이션을 작성하는 등
	【웹페이지의 동적 제어에 사용된다.】

	1) 사용자의 입력 및 계산 = 【연산】
		HTML <form>은 입력창(input)만 제공하고
		키보드, 마우스의 입력과 계산은 오직 자바스크립트로만 처리가 가능하다.

	2) 웹 페이지 내용 및 모양의 【동적 제어(DOM, Document Object Model)】
		HTML 태그의 속성이나 콘텐츠, CSS 속성 값을 변경하여
		【웹 페이지에 동적인 변화를 일으키는 데에 활용】된다.

	3) 【브라우저 제어(BOM, Brouser Object Model)】
		브라우저 윈도우의 크기나 모양 변경, 새 윈도우나 탭 열기, 다른 웹사이트 접속,
		브라우저의 히스토리 제어 등 【브라우저의 작동을 제어】하는 데 활용된다.

	4) 【웹 서버와의 통신(Ajax)】
		【웹 페이지가 웹 서버와 데이터를 주고 받을 때 활용】된다.

	5) 【웹 애플리케이션 작성】
		자바스크립트 언어로 활용할 수 있는 많은 API를 제공하므로,
		웹 브라우저에서 실행되는 다양한 웹 애플리케이션을 개발할 수 있다.

자바스크립트 코드의 위치
	1) HTML 태그의 【이벤트 리스너 속성】에 작성
		※ 이벤트 리스너 속성 : onclick, onmouseover 등
		HTML 태그에는 마우스가 클릭되는 등 이벤트가 발생할 때 처리하는 코드를
		등록하는 리스너 속성이 있다.
		이 속성에 자바스크립트 코드를 작성할 수 있다.

	2) 【<script>】 태그 내에 작성
		<script></script>는 <head></head>, <body></body>, <body> 태그 밖 등
		어디든 들어갈 수 있다.
		웹 페이지 내에서 여러 번 작성할 수 있다.

	3) 【자바스크립트 파일】에 작성
		자바스크립트 코드를 확장자가 .js인 별도의 파일로 저장하고,
		<script src=".js경로"></script>를 통해 불러서 사용한다.
			※ <link> 아님!

	4) 【URL 부분】에 작성
		<a> 태그의 href 속성 등에도 자바스크립트 코드를 작성할 수 있다.
			ex) <a href="javascript:alert("메세지")></a>
				※ javascript: 라고 명시적으로 알려줘야 한다.★★★

자바스크립트로 HTML 콘텐츠 출력
	자바스크립트 코드로 HTML 콘텐츠를 웹 페이지에 직접 삽입하여
	브라우저 윈도우에 출력되게 할 수 있다.
	이 때 【document.write()】 or 【document.writeln()】을 사용한다.
		매개값으로 태그도 사용할 수 있다.
			ex) document.write("<h1>hello</h1>");

		매개값으로 받은 문자열을 document가 가리키는 애한테 넣어준다.

		writeln()은 write()에 줄바꿈문자(\n)이 삽입되는데 
			HTML에서 줄바꿈으로 표현되지 않기 때문에 <pre></pre> 태그로 감싸준다.

	※ with( ){ }의 매개값으로 document를 주면 { }안에 작성하는 코드 앞에
		document가 자동으로 붙는다. 

자바스크립트 다이얼로그
	사용자 입력 및 메세지 출력

	1) 프롬프트 다이얼로그
		prompt("메세지", "디폴트 값");

		사용자가 입력한 문자열 값을 리턴,
		아무 값도 입력하지 않으면 ""를 리턴,
		취소 or 강제로 닫으면 null을 리턴

		디폴트 값은 생략이 가능하다.

	2) 확인 다이얼로그
		confirm("메세지");

		확인/취소 버튼을 가진 다이얼로그
		확인은 true, 취소 or 강제로 닫으면 false를 리턴

	3) 경고 다이얼로그
		alert("메세지");

		메세지 출력

	※ history.go(0) : 새로고침
	※ <hr>은 줄 긋기, 자동으로 줄 바꿈도 된다.
	※ Number(값) : 숫자 타입으로 형 변환
	※ .toFixed(자리수) : 소수점 자르기
			  ex) 3.222222.toFixed(2) == 3.22

자바스크립트 데이터 타입과 변수
	1. 자바스크립트 식별자(identifier)
		자바 스크립트 개발자가 변수, 상수, 함수에 붙이는 이름
			변수명 같은 것

		식별자를 만드는 규칙
			1) 첫 번째 문자는 알파벳, 언더바, $문자만 사용 가능
			2) 두 번째 문자부터는 알파벳, 언더바, 0-9, $문자 사용 가능
			3) 대소문자를 구분한다.
				ex) data와 dAta는 다른 식별자
			※ $로 시작되는 식별자는 jQuery 객체를 나타낸다는 의미.

			6variable		(x) 숫자가 맨 앞에 있어서
			student_ID	(o)
			_code		(x) _로 시작할 수 없다.
			if		(x) 키워드를 식별자로 사용할 수 없다.
			%calc		(x) %로 시작할 수 없다.
			bar		(o)

	2. 문장 구분
		세미콜론으로 문장과 문장을 구분한다.
		한 줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다.

		i = i + 1			(o) 한 줄만 있어서
		i = i + 1;			(o)
		k = k + 1; m = m + 1;	(o) 세미콜론으로 구분해서
		k = k + 1 m = m + 1	(x) 한 줄에 여러 문장이 있을 경우 세미콜론으로 구분한다.
		※ 그냥 항상 찍자★★★

	3. 주석
		// : 한줄 주석
		/* */ : 범위 주석

	4. 데이터 타입
		숫자 타입(Number) : 정수, 실수 다 포함
		논리 타입 : true, false
		문자열 타입 : '안녕', "Hi", ...
			     " "나 ' ' 아무거나 사용 가능
		객체 레퍼런스 타입(Object) : 객체를 가리킴, C언어 포인터와 유사하다.
		undefined, null
			undefined : 타입이 정해지지 않은 것을 의미
				   기본적으로 값이 할당되지 않은 변수는 undefined 타입이며,
					undefined 타입은 변수 자체의 값 또한 undefine가 들어있다.
					ex) var data;
				   초기화되지 않은 변수나, 존재하지 않는 값에 접근할 때 반환된다.

			null : 값이 정해지지 않은 것을 의미
			       명시적으로 값이 비어있음을 나타낼 때 사용

	5. 변수
		var 키워드로 변수를 선언한다.
			var score;		// undefined라는 값으로 초기화
			var year, month, day;	// 3개의 변수를 한 번에 선언
			var addredd = "서울시"	// 문자열 타입

		var 키워드 없이 변수를 선언한다.
			age = 20;		// 만약 이미 age가 선언된 변수라면 덮어쓴다.(수정)
			※ var로 변수를 선언하는 것이 명료하고, 실수를 막을 수 있다.
				그냥 전부 var로 선언하자.★★★

		변수의 특징
			타입이 정해진 상태로 할당되지 않기 때문에
			어떠한 타입의 값이라도 하나의 변수에 담을 수 있다.

			var data = 10;
			data = "한동석";
			data = true;

		지역변수와 전역변수
			변수의 사용범위(scope)에 따라서 지역변수(local)와 전역변수(global)로 나뉜다.

			지역 변수 : 함수 안에서 var 키워드로 선언.
				   선언된 함수 내에서만 사용이 가능함

			전역 변수 : 함수 밖에서 선언되거나
				   함수 안에서 var 키워드 없이 선언

			var x;			// 전역 변수
			function f(){
				var y;		// 지역 변수
				x = 10;		// 전역 변수
				y = 10;		// 지역 변수
				z = 10;		// 전역 변수(var없이 선언해서)
			}

		this로 전역 변수 접근
			전역 변수와 지역 변수의 식별자가 같은 경우
			this를 사용하면 전역 변수를 가리킨다.

			var x;			// 전역 변수
			function f(){
				var x;		// 지역 변수
				x = 10;		// 지역 변수
				this.x = 100;	// 전역 변수
			}

			※ this가 어디에서 사용되는지를 잘 봐야한다.
				태그에서 사용되면 this는 태그를 가리킨다.
				함수에서 사용되면 함수가 포함되어 있는 태그를 가리킨다.

		상수
			let : 재할당 가능, 재선언 불가능
			const : 재할당 불가능, 재선언 불가능

			let ex)
				let a = 'test'	// 선언
				let a = 'test2'	// 재선언 불가능
				a = 'test3'	// 재할당 가능
				※ for문을 사용할 때 식별자는 let 타입으로 준다.
					for문은 함수로 인식하지 않기 때문에
					i라는 식별자를 var 타입으로 선언하면
					for문 밖에서도 사용할 수 있어서 변경될 가능성이 있다.

			const ex)
				const a = 'test'	// 선언
				const a = 'test2'	// 재선언 불가능
				a = 'test3'	// 재할당 불가능

			※ console.log() : 관리자모드(F12)의 console창에 매개값을 띄워준다.

자바스크립트의 함수
	function 식별자(매개변수1, 매개변수2, ...){
		코드작성
		return 리턴 값;
	}
	function : 함수라고 선언
	식별자 : 함수명(동사로 작성한다.)
	매개변수 : 여러 개 있을 경우 ","로 분리하고, 생략도 가능하다.
	return : 함수 실행 종료 후 리턴 값을 반환

	※ 매개변수로 함수도 들어갈 수 있다.
		코드작성에서 나온 결과를 매개변수로 받은 함수의 매개변수로 준다.
		이걸 callback 함수라고 부른다.
			※ callback 함수 : 시스템이 사용자에게 처리 요청을 하는 것

자바스크립트의 전역 함수
	Number.parseInt()
		Number.은 생략이 가능하다.
		문자열을 숫자로, 실수를 정수로 변환한다.
			실수를 정수로 변환할 때 소수점 밑으로 아예 없애버리는 것
		ex)
			parseInt("32") === 32
			parseInt(3.14) === 3
			※ === : 타입과 값 모두 같은지 비교하는 것

	isNaN
		is Not a Number
		숫자가 아니면 true, 숫자면 false를 리턴
		NaN은 숫자가 아님을 나타내는 상수 키워드로 사용할 수도 있다.

		isNaN(32)		false
		isNaN("32")	false
		isNaN("hello")	true
		isNaN(NaN)	true
		※ 기본적으로 숫자는 문자로 저장이되고
			isNaN은 그 문자가 숫자로만 이루어졌는지를 판단
			그렇기 때문에 Number 타입만 따로 지정도 가능하다.
			
	isFinite()
		숫자면 true, 숫자가 아니면 false를 리턴

	eval()
		문자열 형태로 수식을 전달받아서 수식을 계산한다.
		ex)
			eval("2*3+4*6") == 30
	
자바스크립트 객체
	객체의 고유한 속성(필드)을 프로퍼티(property)라고 부르며,
	여러 프로퍼티와 값의 쌍으로 표현된다.(Map)
		필드 = 프로퍼티
	객체가 호출하는 함수는 메소드라고도 부른다.

	ex) 
		
		var account = {				account = 객체명
			money : 3000,			{ } 안에 있는게 하나의 객체
			date : "2021-02-10",
			owner : "한동석",
			number : 110-1212-12345,		여기있는 하나하나가 프로퍼티(필드)
			code : "1234",			
			deposit : function(){ ... },		함수의 경우 선언부에 작성된 소스코드가
			withdraw : function(){ ... },		TEXT영역에 저장되고, 그 주소값이 들어가는 것
			show_balance : function(){ ... }	(함수에 이름이 없기 때문에 key에 주소값을 준다.)
		}
	
	※ 객체에서 프로퍼티 가져오기
		.을 이용하는 방식과 ['key']를 이용하는 방식이 있다.

자바스크립트 객체의 유형
	코어 객체
		Array, Date 타입 등...
		웹 페이지나 웹 서버 응용프로그램 어디서나 사용할 수 있다.
		【코어 객체의 생성은 항상 new 키워드를 사용】한다.
			자바에서 new Array()하면 생성자를 의미하지만,
			자바스크립트에서 new Array()하면 프로토타입이라고 부른다.
				※ 프로토타입은 반드시 첫 글자가 대문자

		배열을 생성하는 방법
			1) var data = [배열에 넣을 값들];
			2) var data = new Array(배열에 넣을 값들);

			※ length로 배열의 길이를 알 수 있지만 길이가 10인 배열에
				배열명.length = 3을 하면 배열의 길이가 3으로 변경되고,
				나머지 값들은 사라진다.

	Data 객체의 주요 메소드
		var 객체명 = new Date();	// 현재 시간을 저장
		객체명.메소드로 값을 얻어온다.
		------------------------------------------------------------
		getFullYear()   : 4자리 년도 리턴
		getMonth()   : 0~11사이의 정수 리턴(0:1월, 1:2월,...)
		getDate()   : 한 달 내의 날짜 리턴(28~31)
		getDay()   : 한 주 내 요일을 정수로 리턴(일요일 : 0,...)
		getHours()   : 0~23사이의 정수 리턴
		getMinutes()   : 0~59사이의 정수 리턴
		getSeconds()   : 0~59사이의 정수 리턴
		getMilliseconds() : 0~999사이의 정수 리턴
		getTime()   : 1970년 1월 1일 0시 0분 0초 기준 현재까지
			     경과된 밀리초 리턴
		------------------------------------------------------------
		setFullYear(year) : 년도 저장
		setMonth(month)   : 월 저장
		setDate(date)   : 한 달 내의 날짜 값 저장
		setHours(hour)   : 시간 저장
		setMinutes(minute) : 분 저장
		setSeconds(second) : 초 저장
		setMilliseconds(ms) : 밀리초 저장
		setTime(t)   : 밀리초 단위인 t 값으로 시간 저장
		------------------------------------------------------------
		toUTCString()   : UTC문자열로 리턴
		toLocaleString() : 로컬 표현의 문자열로 리턴
		toLocaleTimeString() : 로컬 시간 표현

	HTML DOM 객체
		HTML 태그들을 하나씩 객체화 한 것
			<p>안녕</p> ← 하나의 객체
		HTML 페이지의 내용과 모양을 제어하기 위해 사용되는 객체들이다.
		HTML 태그의 포함관계에 따라서 부모 자식 관계로 구성된다.
			<p>
				안녕<span>하세요?</span>
			</p>
			<p>가 부모, <span>이 자식
		HTML에 작성된 코드들을 태그 하나당 하나의 객체로 판단해서 가져온다.
		DOM
		【기본】
		id	 		태그의 id 속성 값			r/w
		lang			태그의 lang 속성 값		r/w
		style			style 객체에 대한 레퍼런스		r/w
		title			태그의 title 속성 값			r/w
		tagName			태그 이름 문자열, 항상 대문자로 표시	r
		innerHTML		시작 태그와 종료 태그 사이의 텍스트	r/w
						※ <input>과 <textarea>는 value를 사용한다.
		----------------------------------------------------------------------------
		【DOM 트리 관련】
		childElementCount		자식 DOM 개수			r
		firstElementChild		첫 번째 자식 객체			r
		lastElementChild		마지막 자식 객체			r
		nextElementsibling		다음 형제 객체 또는 오른쪽		r
		parentElement		부모 객체				r
		previousElementSibling	이전 형제 객체 또는 왼쪽		r
		----------------------------------------------------------------------------
		【크기와 위치】
		offsetHeight		패딩, 테두리, 스크롤바를 포함한 높이	r
		offsetWidth		패딩, 테두리, 스크롤바를 포함한 너비	r
		offsetLeft			객체의 출력 위치(수평)		r
		offsetTop			객체의 출력 위치(수직)		r
		----------------------------------------------------------------------------
		【컬렉션】
		children			자식 DOM 객체들의 컬렉션		
		----------------------------------------------------------------------------
		【메소드】
		addEventListener()		새로운 이벤트 리스너 등록
		appendChild()		마지막 자식 뒤에 새로운 자식 추가
		click()			사용자가 마우스를 클릭한 것과 동일한 작업 수행
		focus()			키 입력을 받을 수 있도록 이 객체에 포커스 지정
		setAttribute()		속성 추가
		insertBefore()		지정된 자식 앞에 새 자식 추가
		quertSelector()		지정된 CSS 선택자와 일치하는 첫 번째 자식 리턴
		removeChild()		자식 삭제
		replaceChild()		자식 대체
		removeEventListener()	addEventListener()로 등록한 이벤트 리스너 제거
		getAttribute()		속성 알아내기
		----------------------------------------------------------------------------
		【컬렉션】
		images			문서 내의 모든 <img> 객체
		links			문서 내의 href 속성을 가진 모든 링크 객체
		forms			문서 내의 모든 <form> 객체
		----------------------------------------------------------------------------
		【메소드】
		getElementsByTagName()	주어진 태그 이름을 가진 모든 태그
		getElementsByClassName()	주어진 class 속성 값을 가진 모든 태그
		getElementsByName()	주어진 name 속성 값을 가진 모든 태그
		getElementById()		주어진 id 속성 값을 가진 첫 번째 DOM 객체
		addEventListener()		document 객체에 이벤트 리스너 등록
						첫 번째 매개값 : 어떤 이벤트인지?
						두 번째 매개값 : 이벤트가 발생하면 어떤게 실행될 것인지?
		close()			HTML콘텐츠를 브라우저에 출력하고, 더 이상 쓰기를 받지 않음
		createElement()		HTML 태그의 동적 생성
		open()			document에 담긴 콘텐츠를 모두 지우고, 
						새로운 HTML 콘텐츠를 쓸 수 있도록 열기
		removeEventListener()	document 객체에 등록된 이벤트 리스너 제거
		write()			document에 HTML 콘텐츠 삽입
		writeln()			write() 후 \n 추가 출력
---------------------------------------------------------------------------------------------------
※ document.write()의 매개변수를 ,로 구분해서 쓰면 이어서 써진다.
	ex) document.write("a","b");
		결과 : ab

※ <script>에서 document.body.style.backgroundColor = 'violet';을 쓰면
	body의 색상이 바뀐다.
	backgroundColor 대신 currentColor를 쓰면 현재 색상을 리턴한다.
		※ document : 현재 파일

※ join() : 매개변수로 받은 구분자를 값 사이사이에 넣는다.★
	default는 ","
		ex) var test = [1, 2, 3, 4]
			test.join("-");
			결과 : 1-2-3-4


		
	