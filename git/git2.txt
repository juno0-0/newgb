Git(분산형 버전 관리 시스템)
	소스코드의 상세 히스토리를 쉽게 확인할 수 있으며,
	【원하는 히스토리로 돌아갈 수도 있다.】
	파일 충돌 시 업로드 전 경고를 통해 알려주기 때문에 실수를 최소화할 수 있다.

Git-Hub(분산형 버전 관리 공유 서버)
	로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다.

저장소(Repository)

	1. 저장소의 종류
		- 로컬 저장소(local) : 개인 전용
		- 원격 저장소(remote) : 공유 전용

	2. 로컬 저장소 만들기
		- 새로운 저장소 생성
		- 원격 저장소를 로컬로 복사

	3. 로컬 저장소에 저장
		- commit
			이전 커밋부터 현재 상태까지 변경된 이력을 로컬에 기록한다.
			작업별로 구분해서 각각 커밋을 하는 것이 일반적이다.
			(기능 추가, 버그 수정 등)
			【개인 서버(로컬 저장소)에 올리는 것】

		- commit message
			커밋할 때에는 이력을 남기는 것이 중요하므로 
			메세지를 남기지 않는다면 커밋이 되지 않는다.
			※ Git에서 권장하는 메세지 양식
				line1 : 변경된 이력을 요약
				line2 : 빈 칸
				line3 : 변경된 근거(이유)

	4. 작업 트리(Work-Tree)
		폴더 또는 디렉토리를 의미한다.

	5. 인덱스(Staging Area)
		작업 트리를 커밋하기 전 작업 트리의 파일 상태를 기록하는 임시 공간.
		커밋하기 전 반드시 커밋할 내용은 인덱스에 추가되어야 하며,
		이를 스테이징이라고 한다.
		변경한 모든 파일을 커밋하지 않고 원하는 파일만 골라서 스테이징을 하게 되면
		인덱스에 등록된 파일들만 커밋된다.
		인덱스에 등록되지 않은 파일들은 커밋이 될 수 없다.

	6. Push
		로컬 저장소에 커밋한 파일들을 원격 저장소에 추가하는 명령어이다.
		
	7. Pull
		원격 저장소에 있는 파일들을 로컬 저장소로 전달받는 명령어이다. 		
		
	※ Branch : 로컬에도 있고 원격에도 있다.
	※ merge : 각 로컬 저장소를 병합하는 것
-----------------------------------------------------------------------------------------
https://git-scm.com/ 들어가서 다운로드
	1. git bash 사용자 등록
		git bash > git config --global user.name "ted"
		> git config --global user.email "tedhan1204@gmail.com"
		> git config --list

	2. 로컬 저장소로 지정
		git init

	3. 현재 상태 확인
		git status

	4. 스테이징(커밋하기 이전)
		git add .
		git add 파일명

	5. 인덱스에서 제외
		git rm --cached test.txt
		git status
	
	6. 커밋
		git commit 

		※ git log
			현재 커밋한 내용
			(HEAD -> master(브랜치))

		※ git log --pretty=oneline
			현재 커밋한 내용을 한줄 요약

	7. 과거 커밋으로 이동
		※ git reset
			- soft : index에 add된 상태로 돌리기
				git reset --soft HEAD~1
					※ 현재가 항상 0번방
			- mixed(생략가능) : index에 add되지 않은 상태로 돌리기
				git reset --mixed HEAD~1
			여기까지는 원본이 안바뀜
			- hard : 이후 커밋은 없던 일로 돌리기(신중하게 생각하고 사용하기)
				git reset --hard HEAD~1
			얘는 원본이 바뀜

			※ git reset --soft HEAD~n
				n번 커밋으로 이동한다.
	
	8. Git-hub 원격 저장소 생성
		git remote add 저장소이름 레퍼지토리주소
		git remote
		git remote -v

		※ fetch : 자동으로 병합되지 않고, 수정된 파일을 직접 보며 수동으로 병합한다.
			원본 내용과 변경된 내용의 차이를 알 수 있으며,
			실수를 최소화 해야 할 때에만 사용한다.
			확인 후 병합은 직접 해주어야 한다.

	9. 원격 저장소 제거
		git remote rm 저장소이름
			예시) git remote rm origin



	10. 원격 저장소에 업로드
		git push 저장소이름 브랜치이름

	11. README.md 파일 생성 후 커밋
		echo "# gitTest" >> README.md

	push 오류 발생시
		git pull origin master --allow-unrelated-histories

	12. 원격 저장소 공유
		git clone 원격저장소주소

	13. 원격 저장소 파일 다운로드
		git pull 원격저장소이름 로컬브랜치이름

※ 참고용 블로그 : https://goddaehee.tistory.com/216?category=381481
--------------------------------------------------------------------------------
브랜치(Branch)
	한 개의 저장소를 여러 갈래로 나누어 관리할 수 있다.
	각각의 독립된 Branch에서는 각각의 개발자들이 기존 버전과 비교를 하거나
	버그를 테스트하는 등 협업을 위해 필요한 목적으로 사용할 수 있다.

	1. branch 확인하기
		git branch
		git branch -r

	2. branch 생성 및 이동
		git branch 브랜치명
		git branch 브랜치명1[자식] 브랜치명2[부모]
			브랜치명1은 브랜치명2에 소속되어 있는 것

		git checkout 브랜치명
			해당 브랜치로 이동

		git checkout -b 브랜치명
			브랜치를 생성 후 이동

	3. branch 삭제(현재 위치한 branch 삭제 불가능)
		git branch -d 브랜치명

	4. test branch에 새로운 파일 생성
		vi text2.txt
		i > 내용 작성 > esc > : > wq! > 엔터
		cat test2.txt

	※ ll만 쓰면 현재 git의 파일 목록을 불러올 수 있다.

	※ 로컬에서 여러 개의 브랜치를 관리할 때
		하나의 브랜치에서 만든 파일명이 다른 브랜치와 겹칠 때에는
		내용을 공유하게 된다. 
		하지만 같은 파일의 같은 라인을 서로 커밋된 후 수정하게 되면,
		충돌이 나기 때문에 이 때에는 직접 충돌된 코드를 수정하여 병합해야 한다.

	5. 충돌시 병합 이전으로 돌아간다.
		git merge --about

	6. 필드에서의 작업 순서

		로컬에 test.txt가 있다 > 원격에 test.txt가 있다 >
		(1)pull > 자동 merge > push
		(2)fetch > 직접 로컬에서 merge > push
	
		pull 원격 저장소 > 로컬에서 파일 CRUD > commit > push
		*!conflict > 로컬에 있는 내 파일을 수정 > push > pull(해당 레포지토리 전체 공유)
		> 더 이상 사용하지 않는 원격저장소와 연결 끊기

	※ 충돌을 피할 수 있는 방법
		【pull을 항상 먼저 하고 작업한다.】