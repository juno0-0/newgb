CREATE TABLE STUDENT(
	ID NUMBER(8),
	NAME VARCHAR2(100),
	MAJOR VARCHAR2(200),
	GENDER CHAR(1) DEFAULT 'W' NOT NULL CONSTRAINT BAN_CHAR CHECK(GENDER IN('M','W')),
	-- OR = IN 같음
	BIRTH DATE CONSTRAINT BAN_DATE CHECK(BIRTH >= TO_DATE('1980-01-01', 'YYYY-MM-DD')),
	CONSTRAINT STU_PK PRIMARY KEY(ID) 
);

SELECT * FROM STUDENT;

INSERT INTO STUDENT (ID, NAME, MAJOR, BIRTH) 
VALUES(1, '한동석', '경영학과', TO_DATE('1981-12-04','YYYY-MM-DD'));
--INSERT INTO STUDENT VALUES()로 쓰면 DEFAULT가 무용지물

--DML
SELECT * FROM player;
--PLAYER 테이블에서 TEAM_ID가 'k01'인 선수 검색
SELECT * FROM player WHERE TEAM_ID = 'K01';

--PLAYER 테이블에서 TEAM_ID가 'k01'이 아닌 선수 검색
SELECT * FROM player WHERE TEAM_ID <> 'K01';

--PLAYER 테이블에서 WEIGHT가 70이상이고 80이하인 선수 검색
SELECT * FROM player WHERE WEIGHT >= 70 AND WEIGHT <= 80;
SELECT * FROM player WHERE WEIGHT BETWEEN 70 AND 80;

--PLAYER 테이블에서 TEAM_ID가 'k06'이고 NICKNAME이 '제리'인 선수 검색
SELECT player_name FROM player WHERE TEAM_ID = 'K06' AND NICKNAME = '제리';

--PLAYER 테이블에서 HEIGHT가 170이상이고 WEIGHT가 80이상인 선수 이름 검색
SELECT * FROM player WHERE HEIGHT >= 170 AND WEIGHT >= 80;

--STATIUM 테이블에서 SEAT_COUNT가 30000초과이고 41000이하인 경기장 검색
SELECT * FROM STADIUM WHERE SEAT_COUNT > 30000 AND SEAT_COUNT <= 41000;
SELECT * FROM STADIUM WHERE SEAT_COUNT BETWEEN 30001 AND 41000;

--PLAYER에서 TEAM_IUD가 'k02'이거나 'k07'이고 포지션은 'MF'인 선수 검색
SELECT * FROM PLAYER WHERE (TEAM_ID = 'K02' OR TEAM_ID = 'K07') AND "POSITION" = 'MF';
SELECT * FROM PLAYER WHERE TEAM_ID IN ('K02', 'K07') AND POSITION = 'MF';
--"POSITION"에 ""가 있는 이유는 이미 오라클에서 사용하고 있는 키워드라서이다.

--STADIUM 테이블에서 SEAT_COUNT가 0이상 30000이하면 'S'
--30001이상 50000이하면 'M' 다 아니면 'L'
SELECT S.*,--*을 쓸때는 단독으로 쓰거나 Alias를 주고 소속을 알려준다.
CASE WHEN SEAT_COUNT >= 0 AND SEAT_COUNT <= 30000 THEN 'S'  
WHEN SEAT_COUNT >= 30001 AND SEAT_COUNT <= 50000 THEN 'M' 
ELSE 'L' END FROM STADIUM S;

SELECT STADIUM_NAME 경기장, SEAT_COUNT "좌석 수",
	CASE
		WHEN SEAT_COUNT BETWEEN 0 AND 30000 THEN 'S'
		ELSE(
			CASE
				WHEN SEAT_COUNT BETWEEN 30001 AND 50000 THEN 'M'
				ELSE 'L'
			END
		)
	END AS 규모
FROM STADIUM S;		

--EMPLOYEES 테이블에서 평균 급여보다 낮은 사람들의 급여 10% 인상하기
UPDATE EMPLOYEES 
SET SALARY = SALARY + SALARY * 0.1 --SALARY = SALARY * 1.1;
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

--EMP 테이블에서 사원의 이름과 사원의 매니저 이름 조회
SELECT e1.ename 사원, e2.ename AS "매니저" FROM emp e1, emp e2 WHERE e1.empno = e2.mgr;

SELECT * FROM EMP;

--EMP 테이블 사원번호로 DEPT 테이블의 지역 검색하기
SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT E.DEPTNO, E.ENAME, D.LOC FROM EMP E JOIN DEPT D 
ON E.DEPTNO = D.DEPTNO;  


