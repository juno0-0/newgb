this
	하나의 클래스로부터 여러 객체가 생성된다.
	각 객체별로 같은 필드를 구성하고 있고, 특정 객체의 멤버변수에
	접근하기 위해서는 해당 객체가 가지고 있는 주소값이 필요하다.
	소스코드 상에서 필드 안에 메소드를 선언할 때 한 번만 선언하고,
	그 안에서 멤버변수를 사용할 때 어떤 객체의 멤버변수인지를 알 수가 없다.
	따라서 객체가 메소드에 접근하면 가지고 있는 주소값을 해당 메소드에게
	전달해주어야 하고, 전달된 주소값을 this라는 변수가 받는다. 따라서
	this.멤버변수로 사용해야 정확히 원하는 필드에 접근할 수 있게 된다.
	하지만 매번 this.을 붙이기 번거롭기 때문에 지역변수와 이름이 같지 않다면
	생략이 가능하다.

	하나의 응용프로그램에서는 this가 단 하나, 따라서
	자바는 단일 프로세스라서 this가 여러개 생길 수 없다.

null
	null은 아직 어떤 주소값을 할당할 지 모를 때 쓰는 주소 초기값이다.
	선언 후 누적연결 사용 시 초기화 방법
	String data = "";
	선언 후 대입 사용 시 초기화 방법
	String data1 = null;
	
	null은 주소값을 초기화할 때 쓰는 값(주소값에 뭘 넣을지 모를 때)
	바로 값을 넣을꺼면 null로 초기화하고 바로 연결할꺼면 ""로 초기화

기본 생성자
	클래스 선언 시 자동으로 기본 생성자가 생성된다.
	만약 사용자가 직접 생성자를 선언한다면
	선언한 생성자가 기본 생성자로 인식 된다.
-----------------------------------------------------------------------------
다형성(Polymorphism) - 메소드에 관련된 성질
	이름이 하나인데 형태가 다양하다.
	JSP에선 거의 쓰지 않고 Spring에서 주로 씀

	1. 오버로딩(Overloading)
		매개변수의 개수, 순서 혹은 타입이 서로 다르면,
		같은 이름의 메소드로 선언이 가능하다.
-----------------------------------------------------------------------------
상속(Inheritance)
	1. 기존에 선언된 클래스의 필드를 새롭게 선언하는 클래스의 필드에서 
	   사용하고 싶을 때(API)
	2. 여러 클래스를 선언할 때 공통 필드가 많다면, 부모 클래스를 선언하고
	   공통 필드 선언 후 여러 클래스들에게 상속해주기 위해서
상속 문법
	class A{
		A필드
	}

	class B extends A{
		A, B필드
	}

A : 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
B : 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스
        보통	교재	     외국          논문

상속의 작동 원리
	자식 객체로 부모 필드에 접근하기 위해서는 당연히 부모 필드가 메모리에
	할당 되어야 한다. 하지만 자식 객체를 객체화 할 때, 자식 생성자만 호출한다.
	자식 생성자만 호출하게 되면 자식 객체는 자식 필드만 접근이 가능하게 되므로
	자식 생성자 호출 시 자동으로 부모 생성자를 먼저 호출하게 된다.
	따라서 부모 필드가 먼저 메모리에 할당된 후 자식 필드가 할당되기 때문에
	자식 객체로 부모 필드에 접근할 수 있게 된다.
	자식 필드 내에서 부모 필드에 접근할 때에는 super 키워드를 사용하고,
	부모 생성자는 super()로 작성한다.

다형성(Polymorphism) - 메소드
	2. 오버라이딩(재정의, Overriding) - 무시하다, 기각하다.
		부모에 있는 메소드가 자식에서 수정이 필요하다면,
		똑같은 이름으로 자식에게 선언해준다.
		부모 필드에 선언된 메소드가 메모리에 먼저 할당되고,
		그 다음 자식 필드에서 재정의된 메소드가 할당된다.
		같은 이름의 저장공간은 선언될 수 없으므로, 
		이미 선언된 부모의 메소드 저장공간에 자식에서 새롭게
		재정의한 코드의 주소값이 들어간다.
		
		예)
		String data = "안녕"; //부모
		data = "하세요"; 	  //자식
		syso(data); 이런 구조가 재정의  //자식 객체로 접근한 메소드
					   //결과는 자식 값.
		
super.메소드;
	자식에서 재정의된 소스코드로 바뀌기 전에
	부모의 메소드를 호출하면 효율적으로 재정의를 구현할 수 있게 된다.
	
	예)	
	String data = "안녕"; //부모
	data += "하세요"; //자식에서 부모의 기능을 그대로 유지한 후 추가한다.
-----------------------------------------------------------------------------
클래스 배열
	같은 타입의 객체가 여러 개 있을 때
	객체명도 여러 개이다. 이름이 여러 개이면 관리하기 어렵기 때문에
	객체 배열로 선언하여 사용한다.

클래스 배열 선언
	1. 클래스명[] 배열명 = new 클래스명[길이];
	2. 클래스명[] 배열명 = {
		new 클래스명(),
		new 클래스명(),
		new 클래스명(),
		...
	}

클래스 배열 사용
	배열명[i].필드명
	배열명[i].메소드명()
-----------------------------------------------------------------------------
Casting(강제 형변환)
	모든 자식은 부모 타입이다.

	up casting
		부모 타입에 자식 값을 넣는 형변환
	down casting
		up casting된 객체를 자식 타입으로 형변환

왜 쓰는지?
	하나의 부모에서 자식은 여러 개이다.
	모든 자식을 하나로 묶기 위해서는 up casting이 필요하다.
	전달받은 자식 값의 필드를 다시 모두 사용하기 위해서는
	down casting으로 복원한다.
	(up casting으로 받아서 타입 비교후 사용하기 위해 down casting을 해야 함)

타입 비교(instanceof)
	a instanceof A : a객체가 A타입이면 true, 아니면 false
	
	예) "안녕" instanceof String : true
-----------------------------------------------------------------------------
2월(JAVA, JDBC)

3월(HTML, CSS, 크롤링(셀레니움), Javascript(jQuery, DOM, BOM))

4월(JSP, MVC, Ajax, JSON, 팀 프로젝트(SVN), 출시(리눅스, 네이버클라우드 플랫폼))

5월(Spring framework, DI, AOP, IoC, POJO, Tier, Spring MVC, Maven, 썸네일(극악난이도), ...)

6월(팀 프로젝트-이관, Git, 시간이 되면 JPA, 면접)


1. 회사에 직접 가서 보는 코딩테스트(서류합격)
	실생활 예제 알고리즘공부(C언어, JAVA)

2. 코딩테스트(순위)
	실생활 예제 알고리즘공부(C언어, JAVA)

자격증 취득하기(있으면 좋은데 없어도 상관없음)
	자격증 = 문제 해결 능력

1. Node.js

Spring framework(JAVA, xml, html, ...) : 멀티 스레드, 복잡한 cpu 연산이 있는 페이지 짱
				  대기업, 공공기관, 정부(전자정부표준프레임워크 egov)
Node : 싱글 스레드 : 입출력
	스타트업, 중소기업



2. 파견업체, 자체 솔류션 업체(규모)

파견
	팀 단위로 출장 다니는 곳으로 가자.(오래 다녀도 괜찮음)
	- 장점 : 단기간 다양한 프로젝트 경험으로 스펙이 좋아짐, 다양한 기술 습득, 트랜드 습득 가능
		한국증권같은 대기업이 아니면 치고 빠지자
	- 단점 : 출근길이 변경된다. (안정성이 떨어짐)

유지보수(왠만하면 경력직을 뽑음)
	- 장점 : 안정적이다, 대출 받을 때도 유리함, 정규직, 기술을 깊게 배울 수 있다.(파견은 깊게 배우진 못함)
	- 단점 : 우물 안 개구리
		트랜드에 뒤처질 수 있다.

3. 루트(경로)

1) 취업준비(최소1년) > 대기업

2) 취업준비(6개월) > 중소기업 신입사원 > 대기업 경력직

3) 취업준비(7개월) > 대기업 인턴 > 대기업 정규직

4) 취업준비(5개월) > 스타트업 신입사원 > 중소기업 경력직 > 대기업 경력직
	이게 제일 괜찮은 듯
5) 취업준비(?) > 중소기업 신입사원(최소 1년 재직) > 창업

6) 취업준비(?) > 대기업 신입사원(최소 1년 재직) > 창업
기간은 넉넉하게 잡은 것

개발자 평균 연봉 2400~3000
