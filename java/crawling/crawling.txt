웹 크롤링(실시간 데이터 수집)
	정식 명칭은 Web Scraping이며, 웹 사이트에서 원하는 정보를
	추출하는 것을 의미한다.
		(craw : 발톱 = 원하는 정보를 긁어온다.)
	보통 웹 사이트는 HTML기반이므로
	정보를 추출할 페이지에서 개발자모드 실행(F12) 후 원하는 태그를 검색하는
	스킬이 요구된다.

	※ 크롤링한 데이터를 소장, 활용하는 것은 불법이 아니지만
	   배포 시 문제가 될 수 있으니 이 경우 해당 사이트의 허락을
	   반드시 맡아야 한다.
		왠만하면 이메일을 보내거나 전화를 해서 허락을 구하면 승락해준다.

웹 크롤링 라이브러리
	1. Jsoup
		정적인 데이터라 혼자 공부해도 될 만큼 간단하다.

		정적 데이터를 비교적 빠르게 수집할 수 있지만 브라우저가 아닌
		HTTP Request를 사용하기 때문에 동적 데이터를 수집하기 위해서는
		해당 서버의 인증키 요구 등 수집할 수 없는 경우가 많다.

		a.com 메인 페이지에 더보기 버튼을 눌러야 할 경우
		Jsoup에서는 누를 수 없다.(메인 페이지 들어갔을 때 딱 나와있는 것만 볼 수 있는 것)

	2. Selenium
		Jsoup에 비해 느리지만 브라우저 드라이버를 사용하여
		동적 데이터도 수집 가능하다.
----------------------------------------------------------------------------------------
환경 설치
	1. 브라우저 버전 확인
		사용하는 크롬 버전에 맞게 다운로드 할 것
		크롬 우측 메뉴 > 도움말 > 크롬 정보 > 버전 확인

	2. 크롬 드라이버 다운로드
		구글에 크롬 드라이버 다운로드 검색 > 맞는 버전 다운로드 > C 드라이브에 저장

	3. 셀레니움 다운로드
		구글에 셀레니움 서버 다운로드 검색
		> Latest stable version 3.141... 다운로드
		> 경고 나와도 계속 누르기
	
	4. build path에서 jar파일 추가
		Order and Export에서 Select All 누르고 Apply
			(나중에 프로젝트를 배포할 때 포함시킨다는 뜻)
		자바 클래스에서 WebD까지만 쓰고 Ctrl+space 눌렀을 때 WebDriver가 나오면 성공
		(이 전체가 라이브러리 가져다 쓰는 방법)

※ win32는 2의 32승의 데이터를 한번에 처리할 수 있다라는 뜻
	그러므로 64에서 32를 사용할 수 있지만
	32에서 64를 사용할 순 없음
----------------------------------------------------------------------------------------
크롤링 실습

1. 기획
	자주 방문하는 사이트에서 데이터 가져오기
	가져온 데이터를 정제해서 서비스 제공하기

2. 개발
----------------------------------------------------------------------------------------
System.setProperty()의 매개값(드라이버 설정)
	public static final String WEB_DRIVER_ID ="webdriver.chrome.driver";
	public static final String WEB_DRIVER_ATHP ="C:\\chromedriver.exe";

기본 생성자에 선언할 코드
	ChromeOption의 option
		options.addArguments()의 매개값으로
		headless를 준 뒤에 ChromeDriver 생성자의 매개값으로 주게 되면
		브라우저가 내부적으로만 돌고 눈에 보이지 않는 창으로 열리게 하는 것
			단, 무한정 대기 상태가 되는 버그가 발생할 수도 있다.
		눈에 보이지 않더라도 브라우저가 열린 것이므로 close()할 때 quit()도 같이 써야한다.
		option을 주지 않을 경우 WebDriver driver = new ChromeDriver();를 사용

	String 변수에 url을 담아서 사용하자.

WebDriver객체명.get()의 매개값으로 크롤링 할 url 주소를 주게 되면
	시작할 때 해당 브라우저 창을 연다.

http 응답 속도보다 자바 컴파일 속도가 더 빠르기 때문에
	【페이지가 이동하는 경우】 Thread.sleep()를 사용해서 잠깐 기다려준다.
	
driver와 WebElement 객체의 차이
	driver.findElement()를 하면 【페이지 전체에서】 해당 태그를 찾아오는 것
	객체명.findElement()를 하면 【객체명이 가지고 있는 태그 안에서】 해당 태그를 찾아오는 것
		만약 찾아오려는 태그가 복수라면 findElements()를 사용한다.

사용한 드라이버를 닫아줄 때는 close()와 quit()를 사용한다.
	close() : 드라이버 연결을 해제, 메모리에서 해제
	quit() : 자바를 실행하면 get()을 사용하여 브라우저가 열리는데
	         close()만 사용할 경우 브라우저 연결만 해제되고 닫히지 않지만
	         【quit()를 사용하면 브라우저가 닫힌다.】

검색창에 키워드 넣기
	태그객체.sendKeys(sc.next());

엔터 입력하기
	태그객체.sendKeys(Keys.RETURN);

class명이 중복이라서 원하지 않는 값도 가져온다면
	부모 태그의 id나 class를 확인해보고 부모껄로 사용할 수도 있다.

getText()
	해당 태그에 있는 Text를 가져온다.
	만약 부모 태그에서 getText()를 사용했을 때 Text가 없다면
	자식으로 가서 Text를 찾고 있으면 자식의 Text를 가져온다.
----------------------------------------------------------------------------------------
※ 변수의 재사용
	더 이상 사용되지 않는 것을 다시 사용하는 것
		상사에게 물어보고 사용한다.
	장점 : 메모리 효율, 절약
	단점 : 가독성이 떨어진다.

※ sc.next()만 사용하면 \r\n이 남기 때문에
	밑에 sc.nextLine()을 사용하여 \r\n을 먹어준다.

※ 외부에 있는걸 가지고 올 때는 항상 try catch를 해준다.
