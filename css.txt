CSS(스크립트 언어)
	Cascading Style Sheets의 약자
	
	CSS는 HTML 요소들이 각종 미디어에서 어떻게 보이는 가를 정의하는 데 사용되며,
	【스타일을 HTML 문서로부터 따로 분리(분업)하는 것이 가능】해진다.

	CSS를 사용하는 이유
		HTML만으로 웹 페이지를 제작할 경우
		HTML 요소의 세부 스타일을 일일이 따로 지정해주어야 하기 때문에
		많은 시간이 걸리며, 완성 후에도 스타일의 변경 및 유지보수, 일괄처리가 매우 힘들어진다.
		이 문제점을 해소하기 위해서 W3C에서 만든 스타일 시트 언어이자 스크립트 언어가 바로 CSS이다.
		웹 페이지의 스타일을 별도의 파일로 저장할 수 있게 해줌으로써
		사이트의 전체 스타일을 손쉽게 제어할 수 있게 된다.
		또한 웹 사이트의 스타일을 일관성 있게 유지할 수 있도록 해주며,
		그에 따른 유지보수 또한 쉬워진다.

	CSS 문법
		P { text-align:center; color:blue; }
	           ---  ---------- ------  ----- ------
	        선택자  속성명   속성값 
		       (Key)    (value)
		     ------------------------------
			     {선언부}

		1. CSS의 문법은 선택자와 선언부로 구성된다.
		2. 선택자는 CSS를 적용하고자 하는 HTML 요소를 가리키고
		   선언부는 중괄호를 사용하여 전체를 둘러싼다.
		3. 각 선언은 CSS 속성명과 속성값을 가지고, 콜론으로 연결된다.
		4. CSS 선언은 언제나 마지막에 세미콜론으로 끝마친다.

	CSS 주석
		/* 주석 */

	CSS 선택자
		1. 전체 선택자
			스타일을 모든 요소에 적용할 때 사용한다.
			주로 모든 하위 태그에 한꺼번에 스타일을 적용할 때 사용하고
			전체 선택자는 asterisk(*) 기호를 사용한다.
			예시)
				* { 선언부 }

		2. HTML 요소 선택자
			태그 선택자(tag selector)
			특정 태그가 쓰인 모든 요소에 스타일을 적용한다.
			선택자 위치에 태그명을 작성하면 사용된 모든 해당 태그에 동일한 스타일이 적용된다.
			예시)
				p { 선언부 }
					모든 <p>에 스타일이 적용

		3. 클래스 선택자
			같은 태그라도 다르게 스타일을 적용하고 싶을 경우 class를 지정하고 사용한다.
			클래스 선택자는 특정 집단의 여러 요소를 한 번에 선택할 때 사용한다.
			같은 클래스 이름을 가지는 요소들을 모두 선택해 주고,
			스타일 적용 시 선택자에 ".클래스명"을 작성해준다.
			예시)
				.클래스명 { 선언부 }

		4. 아이디 선택자
			아이디 선택자도 클래스 선택자와 마찬가지로 웹 문서 안의 특정 부분에
			스타일을 지정할 때 사용한다.
			스타일 적용 시 선택자에 "#아이디명"을 작성해준다.
			예시)
				#아이디명 { 선언부 }

		※ 클래스 선택자와 아이디 선택자의 차이점
			id는 태그 하나 당 무조건 하나만 만들 수 있다.
				여러 개를 사용하면 아무것도 적용되지 않는다.
			class는 태그 하나에 여러 개를 만들 수 있다.
				공백으로 구분해준다.
			예시)
				<div id="test"></div>
				<div class="test1 test2 test3"></div>

		5. 그룹 선택자
			여러 선택자에 같은 스타일을 적용하고 싶은 경우 쉼표로 구분해서
			여러 선택자를 나열한 후 스타일은 한 번만 정의한다.
			예시)
				.클래스명, #아이디명 { 선언부 }

		※ 구분점
			쉼표로 구분할 때에는 포함된 요소가 아닌 다른 요소일 때
			공백으로 구분할 때에는 자식 요소일 때
----------------------------------------------------------------------------------------------------
Cascading
	요소는 하나 이상의 CSS 선언에 영향을 받을 수 있다.
	이 때 충돌을 피하기 위해서 CSS 적용 우선 순위가 필요하다.

	1. 중요도 : CSS가 아디에 선언되었는 지에 따라서 우선순위가 달라진다.
		1) 인라인 스타일(HTML 요소 내부에 style 속성으로 사용)
			<p style="color:blue;">
		2) 내부 스타일 시트(HTML 문서의 style 태그 안에 위치)
			<style>
				p{
					color:blue;
				}
			</style>
		3) 외부 스타일 시트(CSS파일을 따로 만들어서 불러오는 방법)
			<link rel="stylesheet" href="이름.css">
		4) 웹 브라우저 기본 스타일
		※ 요소와 거리가 멀어질 수록 우선순위가 낮아진다.

	2. 명시도 : 명확하게 특정할 수록 우선순위가 높아진다.
		1) !important
			스타일 변경이 안되는 경우 사용하면 대부분 된다.
			<style>
				p {
					color: blue !important;
			</style>
		2) 인라인 스타일
		3) 아이디 선택자
		4) 클래스 선택자
		5) 태그 선택자
		6) 전체 선택자
		7) 상속받은 속성

	3. 선언순서 : 동일한 우선순위의 선택자라면, 나중에 선언된 스타일이 우선 적용된다.
		여러 개의 클래스 명을 사용하는 경우에도 나중에 선언된 스타일이 우선 적용된다.
		.클래스명1, .클래스명2 { 선언부 }
		.클래스명1 { 선언부 } //이게 적용되는 것

	※ <style type="text/css"></style> 이런 형식으로 적혀있으면 옛날에 만들어진 것
----------------------------------------------------------------------------------------------------
font-size 속성값
	1. 절대적 크기(px)
		텍스트의 크기를 【명시된 크기 그대로 설정】하고자 할 때 사용
		절대적 크기로 설정된 텍스트는 모든 브라우저에서 같은 크기로 표현

	2. 상대적 크기
		【텍스트를 둘러싸고 있는 HTML 요소들의 크기에 따라 텍스트의 크기도 같이 변하는 방식】
		또한 사용자가 웹 브라우저를 통해 텍스트의 크기를 직접 변경할 수도 있다.

	크기 단위(기본 크기 : 16px)
		백분율 단위(%)
			기본 크기를 100%로 놓고, 그에 대한 상대적인 크기 설정
		배수 단위(em)
			【부모의 폰트 사이즈를 기준】으로 1.5em하면 부모 폰트 사이즈보다 150% 커진다.
			예시)
				부모 폰트 : 30px
				font-size: 1.5em하면 자식 폰트는 45px;

		배수 단위(rem)
			【기본 크기를 기준】으로 1.5rem하면 기본 크기에서 150% 커진다.
			예시)
				font-size: 1.5rem하면 24px;

		픽셀 단위(px)
			스크린의 픽셀을 기준으로 하는 절대적인 크기를 설정		

font-famaily
	하나의 글꼴만을 설정할 수 있고, 여러 개의 글꼴을 같이 설정할 수도 있다.
	속성 값이 여러 개의 글꼴로 설정되어 있으면
	첫번째 글꼴을 적용시킬 수 없을 때 그 다음 글꼴을 적용시킨다.

	폰트 적용하기
		http://fonts.google.com
		→ 원하는 글꼴 클릭
		→ 우측 select... 클릭
		→ <head> 안에 <link> 복사 후 붙여넣기
		→ font-family 속성에 알맞는 값 복사 후 붙여넣기
		→ 만약 적용이 안되면 맨 뒤에 !important 붙이기
----------------------------------------------------------------------------------------------------
HTML5와 시맨틱 태그
	※ 시맨틱 : 의미, 의미론적인
	   시맨틱 태그 : 의미를 유추할 수 있는 태그

	HTML5에 도입된 시맨틱 태그는 개발자와 브라우저에게 의미있는 태그를 제공한다.

	<div> : non-semantic
	          안에 들어갈 의미를 크게 유추하기 힘들다.
	<header>, <footer> : semantic
			    특정 형태의 글이 포함될 것이라는 유추가 가능하다.

	<header>
		상단, 헤더를 의미

		1. 머리말 지정
		2. 사이트 전체의 헤더는 주로 페이지 맨 위쪽이나 왼쪽에 삽입하며,
		   헤더의 내용으로는 주로 <form> 태그를 사용하여 검색창을 넣거나
		   <nav>태그를 연동하여 사이트 메뉴를 넣는다.

	<nav>
		메뉴, 네비게이션을 의미
	
		1. 문서를 연결하는 네비게이션 링크
		2. 동일한 사이트 안의 문서나 다른 사이트의 문서로 연결하는 링크 모음을 나타낸다.
		3. 네비게이션 메뉴뿐 아니라 <footer>에 있는 사이트 링크 모음 부분에도 많이 사용된다.

	<section>
		여러 중심 내용을 감싸는 공간을 의미

		1. 주제별 컨텐츠 영역 나타내기
		2. 문맥 흐름 중에서 컨텐츠를 주제로 묶을 때 사용하며,
		   그 안에는 섹션 제목을 나타내는 <h1>~<h6> 제목 태그가 함께 사용된다.

	<article>
		글자가 많이 들어간 부분을 의미
		
		1. 컨텐츠 내용 넣기
		2. 웹 상의 실제 내용(본문)을 넣고,
		   보통 블로그의 포스트나 웹 사이트의 내용,
		   사용자가 등록한 코멘트,
		   독립적인 웹 컨텐츠 항목을 포함한다.

	<aside>
		사이트에 위치하는 공간을 의미
		
		1. 본문 이외의 내용 표시
		2. 블로그에서 왼쪽이나 오른쪽 또는 하단에 사이드 바가 표시된 형태이다.
		3. 필수 요소가 아니므로 광고나 링크 모음 등 
		   문서의 메인 내용에 영향을 미치지 않는 내용을 넣을 때 사용된다.

	<footer>
		하단, 푸터를 의미
		
		1. 제작 정보와 저작권 정보 표시
		2. 웹 문서 끝자락에 들어가는 태그
		3. <section>, <article> 등 다른 레이아웃 태그들을 모두 사용할 수 있으며,
		   이런 태그를 이용해서 푸터 안에 다양한 정보를 넣는다.

	결론
		검색 엔진 최적화에서 시맨틱 태그는 매우 중요한 요소이다.
		그렇기 때문에 【검색 결과에 많은 노출을 시키고 싶다면】
		시맨틱 태그를 필수로 사용하는 것이 좋다.

	※ overflow: hidden : 내용물이 박스보다 넘치면 넘치는 부분을
			   스크롤 바를 만들어서 밑으로 내리는게 아니라
			   아예 숨겨버리는 것
----------------------------------------------------------------------------------------------------
웹/앱 반응형 개발
	접근하는 장치의 사이즈 별로 레이아웃이 유동적으로 움직이고,
	너비가 맞지 않아서 깨지는 것을 방지함으로 써
	모든 장치에서 좋은 레이아웃을 제공해준다.

미디어 쿼리(media query)
	웹 페이지에 접속하고 있는 기기마다 원하는 형태로 스타일을 조정할 수 있는 기술

	장점 : 업데이트, 유지보수 관리, 디버깅이 쉬워지며 업데이트 비용이 감소한다.
	단점 : 구현이 쉽지 않다.
	        다운로드 속도가 상대적으로 느려진다.

	구조
		@media only all and(조건문) { 실행문 }
			@media : 미디어 쿼리가 시잠됨을 표시
			only : 미디어 쿼리 구문을 해석하라는 명령어(생략가능)
			all : 미디어 쿼리를 해석해야 할 대상(생략가능)
			(조건문) : 해당 조건을 설정, 보통 접근한 장치의 width가 들어간다.
			{실행문} : 조건에 따라 실행할 속성 설정

	외부에서 접근한 장치에 맞춰서 반응하기 위해 <meta> 태그에
		name="viewport" content="width=device-width, initial-scale=1"을 추가한다.★

	가상 요소
		태그명::before{content:"값";}
			해당 요소 앞에 넣고 싶은 속성
			태그의 컨텐츠 앞쪽에다가 "값"을 붙여 넣어라.

		태그명::after{content:"값";}
			해당 요소 뒤에 넣고 싶은 속성
			태그의 컨텐츠 뒤쪽에다가 "값"을 붙여 넣어라.
----------------------------------------------------------------------------------------------------
※ body는 default로 바깥여백이 있다.
	만약 body 내의 요소가 100% width를 가지고 있다면
	body의 margin을 0으로 해주어야 한다.
※ 백 엔드와 프론트 엔드의 【엔드는 서버】를 의미한다.
※ 기본 글씨 크기는 16px
※ 색상표 : https://materializecss.com/color.html
※ <style>에서 아무리 가장 마지막에 써놓았어도 더 구체적으로 써놓은 선택자의 우선위가 더 높다.
	우선순위가 같다면 마지막껄로 적용된다.
※ 핸드폰으로 html 파일 확인하기
	이클립스에서 톰캣 서버를 한번 더 연결
	→ 핸드폰 와이파이 연결 
	→ 핸드폰에서 인터넷 켜고 url에 IP주소:포트번호/프로젝트명/파일명.html