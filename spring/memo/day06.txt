인라인으로 적용하면 미디어쿼리가 안되니까 <style>에 쓴다.
--------------------------------------------------------------------------------------
상세보기, 수정하기에서 목록보기 눌렀을 때 페이지 유지하기

Flash는 Session의 Flash 영역에 1개밖에 못담음
	Flash는 세션의 남용을 방지하고자 1개의 파라미터만 전달할 수 있다.
	따라서 여러 개를 전달해야 할 때에는 컬렉션에 담아서 넘기거나
	URL에 붙어서 전달하는 addAttribute()방식을 사용해야 한다.
	modify에서는 이미 result를 Flash에 담았기 때문에 더 이상 담을 수 없어서
	자동으로 쿼리스트링에 붙여주는 addAttribute()를 사용한 것

	항상 컨트롤러에 있는 클래스 타입의 매개변수는 생성자를 통해서 파라미터 값으로 초기화 한다.
	만약 전달받은 파라미터 값에 매핑되는 생성자가 없다면 값을 전달받을 수 없다.
	// rttr.addFlashAttribute("cri", cri);
	// rttr.addAttribute("cri", cri);

	따라서 【반드시 해당 객체의 생성자에 전달할 필드명과 일치】하도록 설정해주어야 한다.
	rttr.addAttribute("pageNum", cri.getPageNum());
	rttr.addAttribute("amount", cri.getAmount());
--------------------------------------------------------------------------------------
검색 처리
	단일 항목 : 제목, 내용, 작성자
	다중 항목 : 제목 or 내용, 제목 or 작성자, 내용 or 작성자, 제목 or 내용 or 작성자

MyBatis의 동적 태그들
	<if>
		- 검색 조건이 'T' : 제목 항목에서 키워드 검색
			//<if test="type == 'T'"> 이게 안되면 밑에꺼
			<if test="type == 'T'.toString()">
				TITLE LIKE '%'||#{keyword}||'%'
			</if>
		- 검색 조건이 'C' : 내용 항목에서 키워드 검색
			//<if test="type == 'C'"> 이게 안되면 밑에꺼
			<if test="type == 'C'.toString()">
				CONTENT LIKE '%'||#{keyword}||'%'
			</if>
		- 검색 조건이 'W' : 작성자 항목에서 키워드 검색
			//<if test="type == 'W'"> 이게 안되면 밑에꺼
			<if test="type == 'W'.toString()">
				WRITER LIKE '%'||#{keyword}||'%'
			</if>

	<choose>
		<choose>
			<when test="type == 'T'">
				TITLE LIKE '%'||#{keyword}||'%'
			<when>
			<when test="type == 'C'.toString()">
				CONTENT LIKE '%'||#{keyword}||'%'
			<when>
			<when test="type == 'W'.toString()">
				WRITER LIKE '%'||#{keyword}||'%'
			<when>
			<otherwise>
				TITLE LIKE '%'||#{keyword}||'%' OR CONTENT LIKE '%'||#{keyword}||'%' OR WRITER LIKE '%'||#{keyword}||'%'
			</otherwise>
		</choose>

		※ |(파이프 연산자) : 컨케이트네이션(연결), 하나의 문자열로 연결해주는 것

	<where>
		SELECT * FROM TBL_TABLE
		<where>
			<if test="bno != null">
				BNO = #{bno}
			</if>
		</where>
		※ 태그 안에 값이 생기면 WEHRE절로 붙이고,
			SELECT * FROM TBL_TABLE WHERE BNO = #{bno}
			생기지 않으면 WHERE절을 만들지 않는다.
				SELECT * FROM TBL_TABLE

	<trim>
		prefixOverrides : 쿼리문 맨 앞에 필요하면 넣어주고 필요없으면 빼줘라
				【앞의 조건식이 있는지 없는지를 기준으로 한다.】
				prefix / Overrides를 나눠서 생각하면 된다.
		
		prefix : 【무조건 넣어줘라】

		※ <trim> 은 태그의 내용을 앞의 내용과 관련되어 원하는 접두/접미를 처리할 수 있다.
		
		SELECT * FROM TBL_BOARD
		<where>
			<if test="bno != null">
				BNO = #{bno}
			</if>
			<trim prefixOverrides="AND"> 
				ROWNUM = 1
			</trim>
		</where>
		
		*bno가 null일 때
			SELECT * FROM TBL_BOARD WHERE ROWNUM = 1
			(앞에 다른 조건식이 없으므로 prefixOverrides가 AND를 제거)
		*bno가 null이 아닐 때
			SELECT * FROM TBL_BOARD WHERE BNO = #{bno} AND ROWNUM = 1
			(앞에 BNO=#{bno}라는 다른 조건식이 있으므로 prefixOverrides가 AND를 추가)
	[foreach]
		List, 배열, Map 등을 이용해서 루프를 처리한다.
		
		*파라미터
		Map<String, String> map = new HashMap<>();
		map.put("T", "PS5");
		map.put("C", "판매");
		
		*쿼리
		SELECT * FROM TBL_BOARD
			<if text="map != null">
				<trim prefix="WHERE(" suffix=")" prefixOverrides="OR">
					<foreach item="value" index="key" collection="map"> 
						<trim prefix="OR">
							// index는 key값이 담길 변수
							// item은 value값이 담길 변수
							<if text="key == 'T'.toString()">
								TITLE = #{value}
							</if>
							<if text="key == 'C'.toString()">
								CONTENT = #{value}
							</if>
							<if text="key == 'W'.toString()">
								WRITER = #{value}
							</if>
						</trim>
					</foreach>
				</trim>
			</if>

		*결과
		SELECT * FROM TBL_TABLE WHERE(TITLE = '건담' OR CONTENT = '판매')

	※ split()은 구분점을 전달안하면 문자 하나하나가 분리된다.
	※ 서브쿼리를 ()로 묶는 이유는 가독성 때문이라서 없어도 된다.

※ a태그에 javascript:void(0)을 주면 a태그의 디자인성은 살리면서 링크 기능을 없애는 것

쿼리문을 재사용 하는 경우
	<sql id="">
		쿼리문 작성
	</sql>으로 쿼리문을 만들어놓고
	<include refid="sql id"/>를 사용하면 include 된다

조건식에 val()을 하면 값을 추가하는게 아니라 값이 있냐 없냐

QR 만드는 법
	https://ko.qr-code-generator.com/?ut_source=
	google_c&ut_medium=cpc&ut_campaign=&ut_content=&ut_term
	=%2Bqr%20%2B%EB%A7%8C%EB%93%A4%EA%B8%B0_b&gclid
	=CjwKCAjw-e2EBhAhEiwAJI5jgxXRBXRSgycN6cBl5WpgSpo
	WarMIMghhgEGmFK0Vi6Bb3hKa44jZzBoCINoQAvD_BwE
	가서 URL 입력하거나

	https://www.miricanvas.com/ 가서 만들기 들어가서 더보기에 QR코드 URL 입력
	