스프링 프레임워크

라이브러리와 프레임워크의 차이
	- 라이브러리 : 핵심 로직에서 필요한 기능을 미리 만들어 놓은 소스코드
	- 프레임워크 : 미리 만들어 놓은 소스코드 안에서 작업할 수 있는 환경

DI(의존성주입)
	하나의 필드에서 다른 객체를 사용해야 할 때
	직접 생성자를 호출하면, 의존성이 강해지기 때문에
	유연한 개발을 할 수 없게 된다. 이를 해결하기 위해서는
	누군가가 생성자를 호출해주는 작업을 대신 해주어야 하고,
	이렇게 생성된 생성자를 전달받는 것을 주입이라 한다.
	이 때 그 생성자를 전달해주는 객체가 바로 ApplicationContext이다.

POJO
	객체지향 언어인 자바를 사용할 수 있다는 뜻이다.

DispatcherServlet
	사용자의 요청을 받아서 알맞는 컨트롤러를 실행하고,
	응답까지 해주는 객체이다.

스프링에서 모델클래스를 설계할 때 작업해주어야 할 어노테이션 3개만
	- @Data
	- @Component(최후의 보루)
	- @Getter
	- @Setter
	- @ToString
	- @AllArgsConstructor
	- @RequiredArgsConstructor(@NonNull, final)

Mapper 설계 시 인터페이스를 만드는 이유
	어떤 쿼리문을 사용할 지 모르기 때문에 인터페이스로 설계하고,
	Mybatis를 사용한다면, xml에서 쿼리문을 작성한 후 Mapper 인터페이스와 연결해준다.

Service 설계 시 인터페이스를 만드는 이유
	1. 재사용
	2. 느슨한 결합

3 Tier
	- 영속 계층(데이터 계층) : DB
	- 비지니스 계층 : 핵심 로직
	- 프레젠테이션 계층 : UI/UX, 프론트, 뷰, ...

root-context.xml(IoC 컨테이너)
	Bean을 스캔하여 만들거나 빈을 직접 만들 때 사용되는 설정 파일
	이렇게 만들어진 빈을 관리하여 적절한 곳에 전달해준다.

컨트롤러 클래스에서 사용할 수 있는 어노테이션 2가지
	- @Controller
	- @RestController
	- @RequestMapping
	- @AllArgsConstructor
	- @RequiredArgsConstructor
	- @GetMapping
	- @PostMapping
	- @PutMapping
	- @PatchMapping
	- @DeleteMapping
	- @RequestParam
	- @ModelAttribute
	- @ResponsBody
	- @RequestBody
	- @PathValiable

AOP : 관점 지향 언어
	핵심 로직 이외의 주변 로직들은 모듈로 분리한 후
	핵심 로직 실행 시 적절한 부분에 삽입되는 기법

스프링 프레임워크의 특징
	1. 경량화
	2. POJO
	3. AOP

REST의 특징
	1. 경량화
	2. 하나의 리소스를 대표하는 것
	3. 서로 다른 언어끼리 혹은 서버끼리 데이터를 전달 가능