스프링 프레임워크

[학습 목표]
	- 스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
	- 스프링에서 XML을 이용하는 객체 관리 방법
	- 스프링의 테스트 환경 구축

프레임워크란?
	Collection Framework
	Mybatis

	【뼈대나 근간을 이루는 코드들의 묶음】
	개발자는 각 개개인의 능력차이가 큰 직종이고, 
	개발자 구성에 따라 프로젝트 결과 역시 큰 차이를 낳는다.
	이런 상황을 극복하기 위한 코드의 결과물이 바로 프레임워크이다.
	프로그램의 기본 흐름이나 구조를 정하고 모든 팀원이 이 구조에 자신의 코드를
	추가하는 방식으로 개발하게 된다.

프레임워크와 라이브러이의 차이
	- 프레임워크
		【제어의 주체】가 개발자가 아닌 【프레임워크】이고,
		그 안의 여러 기능들을 가져다 사용하는 방식이다.
		만약 수정해야할 때에는 도구들을 사용해서 수정 및 추가가 가능하다.
	
	- 라이브러리
		【제어의 주체가 개발자】이며, 
		핵심 로직에서 필요한 부분들만 가져다 사용하는 방식이다.

프레임워크의 장점
	개발의 필요한 구조를 이미 코드로 만들어 놓았기 때문에,
	실력이 부족한 개발자라 하더라도 반쯤 완성한 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다.
	【회사 입장】에서는 프레임워크를 사용하면 【일정한 품질이 보장】되는 결과물을 얻을 수 있고, 
	【개발자 입장】에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에 【개발 시간을 단축】할 수 있다.

스프링 프레임워크란?
	【경량 프레임워크(light-weight)】★★★
		예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록
		만들다 보니 하나의 기능을 위해서 너무 많은 구조가 필요했다.
			(하나를 쓰려고 해도 다 가져다 써야함)
		기술이 너무나 복잡하고 방대했기 때문에, 전체를 이해하고 개발하기에는 어려움이 많았다.
		그래서 스프링 프레임워크가 등장했고, 
		【특정 기능을 위주로 간단한 jar파일 등을 이용해서 모든 개발이 가능하도록 구성】되어 있다.

스프링 프레임워크 장점
	- 복잡함에 반기를 들어서 만들어진 프레임워크
	- 프로젝트 전체 구조를 설계할 때 유용한 프레임워크
	- 다른 프레임워크들을 포용(여러 프레임워크를 혼용해서 사용가능, 【접착성】)
	- 개발 생산성과 개발도구의 지원

스프링 프레임워크의 특징
	- POJO 기반의 구성
	- 의존성 주입(DI)을 통한 객체 간의 관계 구성
	- AOP(Aspect-Oriented-Programming) 지원
	- 편리한 MVC 구조
	- WAS에 종속적이지 않은 개발 환경
	- 트랜잭션 관리 용이
	
	POJO(Plain Old Java Object) 기반의 구성
		오래된 방식의 간단한 자바 객체라는 의미이며,
		Java 코드에서 일반적으로 객체를 구성하는 방식을 
		스프링 프레임워크에서 그대로 사용할 수 있다는 말이다.
		【즉, 자바를 쓸 수 있다는 말】

	의존성 주입(DI)을 통한 객체 간의 관계 구성
		의존성(Dependency)이란
			【하나의 객체가 다른 객체 없이 제대로 된 역할을 할 수 없다는 것】을 의미한다.
			예를 들어 A객체가 B객체 없이 동작이 불가능한 상황을 'A가 B에 의존적이다, 결합성이 단단하다' 라고 표현한다.
				【의존성과 결합성은 비례한다.】

		주입(Injection)이란
			말 그대로 외부에서 밀어 넣는 것을 의미한다.
			예를 들어 어떤 객체가 필요한 객체를 외부에서 밀어 넣는 것을 의미한다.
			주입을 받는 입장에서는 어떤 객체인지 신경 쓸 필요가 없고
			【어떤 객체에 의존하든 자신의 역할은 변하지 않게 된다.】
				A가 의존하는 객체가 B, C, D 상관없이 A의 역할은 같다.

		의존
			ⓐ→→→→→→→→→ⓑ
			a가 b에 의존
			a객체에서 b객체를 직접 생성
				결합성이 단단해진다.
		
		의존성 주입
			ⓐ→→→→→??→→→→→ⓑ
			a는 b가 필요하다는 신호만 보내고, 
			b객체를 주입하는 것은 외부에서 이루어짐

		의존성 주입 방식을 사용하기 위해서는 ??라는 존재가 필요하게 된다.
		스프링 프레임워크에서는 【ApplicationContext】가 바로 ??라는 존재이며,
		【필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역할】을 한다.
			dbcp의 context.xml과 같은 역할
		따라서 개발자들은 기존의 프로그래밍과 달리 【객체와 객체를 분리해서 생성】하고,
		이러한 【객체들을 엮는(wiring) 작업의 형태로 개발】하게 된다.

		【ApplicationContext가 관리하는 객체들을 '빈(Bean)'】이라 부르고,
		빈과 빈 사이의 의존 관계를 처리하는 방식으로 
		【XML설정(필수), 어노테이션 설정, Java설정 방식】을 이용할 수 있다.

	AOP(Aspect-Oriented-Programming) 지원
		【관점 지향 프로그래밍】
		좋은 개발환경은 개발자가 비지니스 로직에만 집중할 수 있게 한다.
		스프링 프레임워크는 반복적인 코드를 제거해줌으로써 
		핵심 비지니스 로직에만 집중할 수 있는 방법을 제공한다.
			반드시 해야하지만 매번 하기 번거로운 것을 
		보안이나 로그(출력), 트랜잭션, 예외 등과 같이 비지니스 로직은 아니지만,
		반드시 처리가 필요한 부분을 횡단 관심사(cross-concern)이라고 한다.
		스프링 프레임워크는 이러한 【횡단 관심사를 분리해서 제작하는 것이 가능】하고
		횡단 관심사를 모듈(메소드)로 분리하는 프로그래밍을 【AOP라고 한다.】
		이를 통해서 3가지의 이점이 생긴다.
			1) 핵심 비지니스 로직에만 집중하여 코드 개발
			2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정 최소화
			3) 원하는 관심사의 유지보수가 수월한 코드 구성 가능

		※ 횡단 관심사 : 로그, 예외, 트랜잭션을 모듈로 만들어놓고
				비지니스 로직에서 지정한 코드가 실행되면 실행되도록 하는 것
		※ 종단 관심사 : 비지니스 로직들

	트랜잭션의 지원
		DB 작업 시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
		어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.

※ 컨트롤러 : 요청과 응답 객체를 가지고 있는 것
--------------------------------------------------------------------------------------------------------
프로젝트 기본 구성 요소
	src/main/java : 작성되는 코드의 경로(비지니스 로직이 쓰여지는 곳)
	src/main/resources : 실행할 때 참고하는 기본 경로
	src/test/java : 테스트 코드를 넣는 경로(테스트 하는 곳)
	src/test/resources : 테스트 관련 설정 파일 보관 경로
	
웹과 관련된 스프링 설정 파일(Resources, View Resolver)
	src/main/webapp/WEB-INF/spring/appServlet>servlet-context.xml
		scan에 등록된 패키지에 있는 클래스의 리턴값의 앞에는 prefix의 value를 붙여주고
		뒤에는 suffix의 value를 자동으로 붙여준다.

스프링 설정 파일(Bean, IoC 컨테이너)
	src/main/webapp/WEB-INF/spring/root-context.xml

Tomcat의 web.xml파일(Front Controller, DispatcherServlet)
	src/main/webapp/WEB-INF/web.xml

템플릿 프로젝트의 jsp파일 경로
	src/main/webapp/WEB-INF/views

Maven이 사용하는 pom.xml
	project/pom.xml
--------------------------------------------------------------------------------------------------------
의존성 주입 테스트
	레스토랑 객체를 만들고 셰프 객체를 주입하는 예제
		- 생성자, setter메소드를 이용한 주입으로 의존성 주입 구현.
		- 설정 방식은 XML, 어노테이션을 이용해서 처리

		자바 아이콘 앞에 S가 없으면 @Component를 안했거나 root-context.xml에 패키지 등록을 안했거나
		※ @Component : 스프링에게 【해당 클래스가 스프링에서 관리해야 하는 대상임을 표시】
				보통 Model 객체에 다 붙여준다.
		※ @Data : Lombok의 【setter, getter, 생성자, toString()등을 자동으로 생성】하기 위함
				getter만 쓸 경우 @Getter만 해도 된다.

		※ Setter를 사용해서 자동으로 메소드를 연결시켜준다.
			@Setter(onMethod_ = @Autowired)
			private Chef chef;
			
			onMethod 속성은 생성되는 setChef에 @Autowired 어노테이션을 추가하도록 할 때 사용된다.
			버전에 따라 onMethod 혹은 onMethod_를 사용하게 된다.
				_ 붙였는데 오류나면 지우기
				outline에 getter&setter 없거나 코드에 노란줄 생기면 다시 설치

		※ scan 등록 시 root-context.xml 갔는데 색이 안나오면
				우클릭 > Open with > Spring Config Editor
			scan 등록하기 전에 밑에 Namespaces 들어가서 context 체크 > ok > 돌아와서
			<context:component-scan base-package=""></context:component-scan>에 패키지 등록
		
		※ root-context.xml에 Beans Graph가 없을 경우
			root-context.xml 우클릭 > Spring > Add as Bean Configuration

스프링 프레임워크 동작 시 생기는 일
	- 스프링 프레임워크가 시작되면 먼저 스프링이 사용하는 메모리 영역을 만든다.
		이것이 Context이다.
	- 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요하고
		이 설정 파일이 바로 root-context.xml이다.
	- root-context.xml에 설정되어 있는 <context:component-scan>태그의 내용을 통해서
		com.koreait.sample 패키지를 스캔하기 시작한다. (ex00/root-context.xml ① 참고)
	- 해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는 어노테이션이
		존재하는 클래스의 인스턴스를 생성한다. (ex00/com.koreait.sample ② 참고)
	- Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로,
		Chef 객체의 레퍼런스를 Restaurant 객체에 주입한다. (ex00/com.koreait.sample.Restaurant.java ③ 참고)

	테스트 서버
		src/test/java에 클래스 생성
		@RunWith(SpringJUnit4ClassRunner.class) 
			// 테스트 코드가 스프링을 실행
		@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml") 
			// 지정된 클래스나 문자열을 이용해서 필요한 객체들을 스프링 내에 객체로 등록
		@Log4j == private static final Logger logger = LoggerFactory.getLogger(HomeController.class); 같은 것

		log.info() == syso
			두개가 같은 것

		assertNotNull(restaurant); 
			매개변수가 Null이 아니어야만 테스트 성공
			만약 Null이라면 밑에 있는 코드는 실행되지 않음

		setter()로 주입 
			@Setter(onMethod_ = @Autowired)
			private Restaurant restaurant;

		INFO : com.koreait.sample.SampleTests - Restaurant(chef=Chef())
		INFO : com.koreait.sample.SampleTests - ================
		INFO : com.koreait.sample.SampleTests - Chef()
		
		/*
		 * 1. 테스트 코드가 실행되기 위해서 스프링 프레임워크가 동작
		 * 2. 동작하는 과정에서 필요한 객체들이 스프링에 등록
		 * 3. 의존성 주입이 필요한 객체는 자동으로 주입이 이루어짐
		 */

		@AllArgsConstructor
			인스턴스 변수로 선언된 모든 것을 파라미터로 받는 생성자를 작성한다.
			모든 Chef 객체의 생성자를 만들 때 사용
		@RequiredArgsConstructor
			특정 변수에 대해서만 생성자를 작성할 때 작성한다. 
			@NonNull이나 final이 붙은 인스턴스 변수에 대한 생성자를 만들어낸다.
			특정 Chef 객체의 생성자를 만들 때 사용

		테스트 서버에서는 객체화를 Setter로 해줘야한다.