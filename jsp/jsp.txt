웹 서버(http) : 아파치
	【사용자의 요청이 정적 데이터인지 동적 데이터인지 판단한다.】
		정적 데이터일 경우 준비된 HTML 문서를 그대로 응답 해주고,
		동적 데이터일 경우 웹 컨테이너에 요청을 보낸다.

웹 컨테이너(서블릿 컨테이너)
	사용자의 동적 데이터를 JSP, 서블릿으로
	【연산 및 제어, DB 접근 등을 통해 정제된 데이터로 가공 후 이를 응답해준다.】
		※ 정제된 데이터 = 정적 데이터

WAS(Web Application Server) : 톰캣
	동적 데이터를 처리할 서블릿을 메모리에 할당하며,
	web.xml을 참조하여 해당 서블릿에 대한 Thread를 생성한다.
		※ web.xml은 어떤 요청이 어떤 서블릿과 연결되는지 알고 있다.
	【서블릿 요청(httpServletRequest)과 서블릿 응답(httpServletResponse) 객체 생성 후 서블릿에 전달한다.】

Servlet
	【Java 코드 안에 HTML 코드를 작성】할 수 있는 JAVA 프로그램이다.
	Thread에 의해 서블릿에 있는 service() 메소드가 호출된다.
	전송 방식 요청에 맞게 doGet() 또는 doPost()메소드를 호출한다.

	doGet(HttpServletRequest request, HttpServletResponse response){}
	doPost(HttpServletRequest request, HttpServletResponse response){}

	WAS는 HttpServletResponse 객체를 HttpResponse형태로 바꾸어서 웹 서버에 전달하고,
	생성된 Thread를 종료해준다.
	그 후에 HttpServletRequest와 HttpServletResponse를 제거한다.

JSP(Java Server Page)
	【HTML을 중심】으로 자바와 같이 연동하여 사용하는 웹 언어이다.
	【HTML 코드 안에 Java 코드를 작성】할 수 있는 언어이다.

※ WEB-INF에 web.xml이 없을 경우
	프로젝트 우클릭 > Java EE Tools >
	Generate Deployment Descriptor Stub를 눌러서 생성

※ Java Reources의 src에는 java를 작성
   WebContent에는 HTML을 작성

※ @WebServlet("")의 매개값은 Servlet의 경로를 의미한다.
	servlet 파일을 생성할 때 Next를 눌러서 URL mappings에서 수정하거나,
	@WebServlet("")에서 바로 수정할 수 있다.

※ web.xml에서 경로를 이름으로 바꾸면 경로 대신 이름을 사용할 수 있다.
	<servlet>
		<servlet-name>calc-jsp</servlet-name>		//서블릿 이름
		<!-- ③ 요청한 경로 대신 calc.jsp를 응답해준다. -->
		<jsp-file>/calc.jsp</jsp-file>				//파일 경로
	</servlet>
	<servlet-mapping>
  		<!-- ② calc-jsp이름으로 찾아간다. -->
		<servlet-name>calc-jsp</servlet-name>		//서블릿 이름
		<!-- ① 클라이언트가 요청한 URL에 calc가 들어 있다면 -->
		<url-pattern>/calc</url-pattern>			//임의의 이름
	</servlet-mapping>

	임의의 이름을 사용하면 서블릿 이름으로 찾아가서 
	서블릿 이름으로 등록된 파일 경로가 있다면
	그 경로로 이동한다.

	만약 여기서 오타가 난다면 tomcat 오류가 발생하니 오타에 주의한다.
		"/"를 잘 신경쓰자.
-----------------------------------------------------------------------------------
[계산기 만들기 실습]
1. calc.jsp, Result.java(서블릿), Calc.java(클래스) 생성
2. calc.jsp에서 input 태그로 수식 통채로를 입력받고(예:2*9) action은 Result 서블릿으로 설정해준다.
3. Calc.java(클래스)에 사칙연산 메소드를 정의한다(모두 두 정수를 전달받은 후 int로 리턴해준다).
4. 나눗셈 메소드에는 분모가 0일 경우를 처리하지 않고, Result.java(서블릿)에서 나눗셈 메소드 사용 시
	예외 처리를 해준다.
5. Result.java(서블릿)에서 전달받은 수식을 분석한 후 
   사칙연산 연산자에 맞게 Calc.java의 메소드를 호출하여 결과를 출력해준다.

※ request.getParameter("태그의 name")
	name에 전달받은 값을 가져올 수 있다.
※ 수식으로부터 연산자를 split()으로 분리할 때에는
	【split("\\+연산자")로 사용해야 한다.】
※ 잘못 입력했을 때와 0으로 나눌 때 모두 예외처리를 사용하여 알맞는 메세지를 출력해준다.

6. Result.java(서블릿)에서 calc.jsp로 돌아갈 때에는 calc.jsp가 아닌 calc로 이동할 수 있도록 web.xml 설정을 작성해준다.
-----------------------------------------------------------------------------------
전달받은 데이터 인코딩 설정
	request.setCharacterEncoding("UTF-8");
전달할 데이터 인코딩 설정
	response.setCharacterEncoding("UTF-8");
응답할 페이지 타입 설정
	response.setContentType("text/html; charset=UTF-8");

※ 일단 쓰고 시작하자.
-----------------------------------------------------------------------------------
디렉티브 태그
	<%@ page%>
		【현재 JSP 페이지에 대한 정보를 설정하는 태그】
		되도록 페이지 최상단에 선언한다.
			보통은 errorPage, isErrorPage말고 건들게 없다

		속성(기본값)
			1. language(java) : 현재 JSP페이지가 사용할 프로그래밍 언어
			2. contentType(text/html) : 현재 JSP페이지가 생성할 문서의 콘텐츠 유형
			3. pageEncoding(ISO-8859-1) : 현재 JSP 페이지의 문자 인코딩 설정
			4. import : 현재 JSP페이지에서 사용할 자바 패키지 및 클래스 설정
			5. session(true) : 현재 JSP페이지에 대한 세션 사용 여부 설정
			6. info : 현재 JSP페이지에 대한 설명을 설정
			7. errorPage : 현재 JSP페이지에 【오류가 발생했을 때 보여줄 오류 페이지 설정】
				      500 에러 페이지 대신 설정해 놓은 페이지를 보여주는 것
			8. isErrorPage : 【현재 JSP페이지가 오류 대체 페이지인지】 여부 설정
				        true로 하면 500 에러 페이지 대신 이 페이지를 보여준다.

스크립트 태그★★★★★
	HTML코드에 자바 코드를 넣어 프로그램이 수행하는 기능을 구현할 수 있다.

	1. 선언문(declaration)
		<%! %>
		자바 변수나 【메소드】를 선언하는 데 사용

	2. 스크립틀릿(scriptlet)
		<% %>
		자바 변수 선언 및 【자바 로직 코드】를 작성하는 데 사용
	
	3. 표현문(expression)
		<%= %>
		변수, 계산식, 리턴이 있는 메소드 호출 등
		【값】을 작성하여 문자열 형태로 출력.
			여기서 ";"를 쓰면 안된다.

include 디렉티브 태그
	<% include file="파일 경로"%>
	현재 JSP페이지의 【특정 영역에 외부 파일의 내용을 포함하는 태그】
	보통 header와 footer는 대부분의 페이지에 동일한 내용으로 작성되기 때문에
	유지보수 및 편의를 위하여 외부 파일로 만든 후 include하여 사용한다.
	이러한 것을 모듈화라고 한다.
		※ 모듈화 : 모듈=부품
			  프로그래밍 언어에서는 함수로 만드는 작업을 의미
			  일회용이 아닌 재사용의 목적으로 만들어 놓을 때 사용

액션태그
	【서버나 클라이언트에게 어떤 행동을 하도록 명령하는 태그】
	
	1. forward
		<jsp:forward />
		다른 페이지로의 이동, 【페이지 흐름을 제어】한다.

	2. include
		<jsp:include />
		include 디렉티브 태그와 똑같지만 이걸 주로 쓴다.

	3. param
		<jsp:param />
		현재 페이지에서 【다른 페이지에 정보를 Map형식으로 전달】한다.

	※ forward 태그 안이나 param 태그 뒤에 주석을 사용하면
		주석마저 데이터로 인식하기 때문에
		【주석은 forward 태그 밖에 작성한다.】
-----------------------------------------------------------------------------------
자바빈즈(자바 객체)
	JSP의 【표준 액션 태그를 통해 접근할 수 있는 자바 클래스】로서,
	기본 생성자, 멤버 변수(필드)와 gettser, setter 메소드로 이루어져 있다.

	액션태그
		4. useBean
			<jsp:useBean />
			Java : Test t = new Test();
			JSP : <jsp:useBean class="패키지명.Test" id="t" />
				class : 패키지명.클래스명
				id : 객체명
				<% Test t = new Test() %>와 같다.

		5. setProperty
			<jsp:setProperty />
			Java : t.setName("이지은");
			JSP : <jsp:setProperty name="t" property="name" value="이지은"/>
				name : 객체명
				property : 필드명
				value : 값

			※ <jsp:setProperty name="t" property="*" />
				t라는 객체명에 있는 모든 property에 값을 넣어준다.
				단, 반드시 파라미터의 name과 해당 객체의 필드명이 일치해야 한다.			 

		6. getProperty
			<jsp:getProperty />
			Java : t.getName();
			JSP : <jsp:getProperty name="t" property="name" />
				name : 객체명
				property : 필드명

	자바빈즈 규칙
		1. 패키지화
			반드시 패키지를 만든다.
		2. 멤버변수 접근자를 private으로 설정
			getter, setter 사용을 강제하기 위해서
		3. getter, setter의 접근자는 public
		4. 매개변수가 없는 기본 생성자를 반드시 생성
-----------------------------------------------------------------------------------
내장 객체
	객체화 없이 사용할 수 있는 객체이며, 
	jsp파일이 서블릿으로 변환될 때
	웹 컨테이너가 자동으로 메모리에 할당하며 제공한다.
	【자바코드 작성하는 곳에서만 사용할 수 있다.】

	request : 웹 브라우저의 요청 정보를 저장
	response : 웹 브라우저의 요청에 대한 응답 정보를 저장
	out : JSP페이지 body에 출력할 내용 정보를 저장
	session : 하나의 웹 브라우저의 정보를 유지하기 위한 세션 정보를 저장
	pageContext : JSP페이지에 대한 정보를 저장(보통 MVC모델2에서 사용)
	config : JSP페이지에 대한 설정 정보를 저장
	exeception : JSP페이지에 예외가 발생한 경우 사용되는 객체
-----------------------------------------------------------------------------------
GET방식과 POST방식
	GET
		【주소에 데이터를 추가해서 전달하는 방식】
		URL에 ?가 들어가면 GET방식
		보통 쿼리 문자열(query string)에 포함되어 전송되므로,
			※ query string : URL에서 ? 뒤에부터
		길이에 제한이 있으며 주소에 데이터가 보이므로 보안상 취약점이 존재한다.
		중요한 데이터는 POST방식을 사용하여 요청하는 것이 좋지만
		POST방식보다 전송 속도가 빠르다.

	POST
		【데이터를 별도로 header라는 공간에 첨부하여 전달하는 방식】
			※ header는 URL 뒤에 숨어있다.
		브라우저 히스토리에도 남지 않고 데이터는 쿼리 문자열과는 별도로 전송된다.
		따라서 길이의 제한도 없으며, GET방식보다는 보안성이 높다.
		하지만 GET방식보다 상대적으로 느리다.

	결론
		전송할 데이터의 양이 작고 노출되어도 무방하다면 GET방식
		전송할 데이터의 양이 크고 노출되면 안되는 데이터라면 POST방식

※ response.sendRedirect("경로") : 경로로 이동한다.
-----------------------------------------------------------------------------------
Ajax(Asyschronous Javascript And Xml)
	빠르게 동작하는 동적인 웹 페이지를 만들기 위한 개발 기법
	Ajax는 【웹 페이지 전체를 다시 리로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있고】
	백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만 표시할 수 있다.
	이 때 서버와 여러 데이터를 주고 받을 수 있다.

	- JSON, XML(defalut), HTML, 텍스트 등
	
	장점
		1. 웹 페이지의 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수 있다.
		2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보내거나 받을 수 있다.★★★
		3. 다양한 UI(동적 페이지) 구현이 가능해진다.

	단점
		1. 페이지 이동이 없기 때문에 히스토리 관리가 안된다.
		2. 반복적인 데이터를 요청하면 느려지거나 작동하지 않게 된다.
			ex) 로그인 버튼을 빠르게 여러번 누르면 페이지 이동이 느려지는 것
		3. 페이지 이동이 없다는 것은 보안상의 문제도 발생할 수 있다는 것이다.

	구성 요소
		HTML, CSS : 웹 페이지의 표현
		DOM : 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용
		JSON, XML : 데이터 교환
		XMLHttpRequest : 웹 서버와의 비동기식 통신
		Javascript : 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데 사용

	XMLHttpRequest 객체 생성★★★
		var 객체명 = new XMLHttpRequest();

	서버에 요청하기
		서버에 요청을 보내기 위해서는 우선 XMLHttpRequest 인스턴스를 생성해야 하고,
		인스턴스의 open(), send()를 사용하여 요청을 보낼 수 있다.

	open()
		서버로 보낼 【Ajax 요청의 형식을 설정】
		open("전달방식", "URL주소", 동기 여부);
			전달방식 : GET, POST 등
			URL주소 : 요청을 처리할 서버의 파일 주소 전달
			동기 여부 : 비동기식(true), 동기식(false)
				   비동기식이 default

	send()
		작성한 【Ajax 요청을 서버로 전달】
		전달 방식에 따라서 인수를 가질 수도, 가지지 않을 수도 있다.

		send();		//GET방식
		send(문자열);	//POST방식

	Ajax 요청 시 XMLHttpRequest 객체는 각 상태별로 readyState가 변한다.
		0 : 객체명.UNSENT, 보내지 않음
		1 : 객체명.OPEND, open()을 호출하는 순간
		2 : 객체명.HEADERS_RECEIVED, send()를 호출하는 순간
		3 : 객체명.LOADING, 요청 중
		4 : 객체명.DONE, 요청 성공

		응답이 성공적으로 되었다면 상태코드(객체명.status)가 200, 201이 된다.

	예시
		function sendIt(){
			var httpRequest = new XMLHttpRequest();

			//GET방식
			httpRequest.open("GET", "test.jsp?name=jieun&age=29", true);
				※ 쿼리스트링으로 정보를 전달할 경우 구분은 "&"를 사용
			httpRequest.send();

			//POST방식
			httpRequest.open("POST", "test.jsp", true);
			httpRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
				※ setRequestHeader() : 서버로 전송할 데이터 타입의 형식을 지정
			httpRequest.send("name=jieun&age=29");

			※ onreadystatechange : 상태의 변화가 있을 때마다 자동으로 호출, onload()를 사용해도 된다.
			httpRequest.onreadystatechange = function(){
				※ 요청에 성공했을 때
				if(httpRequest.readyState == XMLHttpRequest.DONE){
					※ 응답에 성공했을 때
					if(httpRequest.status == 200){
						※ 객체명.responseText : 서버에서 리턴해준 정보를 담고 있는 프로퍼티
						document.getElementById("test").innerHTML = httpRequest.responseText;
					}
				}
			}
-----------------------------------------------------------------------------------
JSON
	경량화된 데이터 교환 형식
	【서로 다른 언어들 간 데이터를 주고받을 수 있도록 만들어진 텍스트 기반의 형식】
	프로그래밍 언어가 아닌 【데이터 표기 방법】 중 하나
	기본적으로 name:value형태(Map)의 구조를 가지고 있다.

	사용
		1. Java
			- DB 조회의 결과를 외부에 전달할 때 JSONObject(단수) 혹은 JSONArray(복수) 타입으로 지정하고
				toJSONString()을 사용하여 【String타입으로 변환 후 전달】
			- 외부에서 전달받은 JSONString을 JSONObject타입으로 변환(parsing)하여 DB 작업 진행

		2. .json
			- JSON 데이터가 들어있는 파일

		3. uri(REST)
			- 어떠한 데이터를 가리키고 있는 고유 주소
			- default는 xml형식으로 데이터가 보이고,
				uri뒤에 .json을 붙이면 json으로 데이터를 확인할 수 있다.

			※ url : 【주소】, 이름을 찾는 경우 이름이 있는 곳으로 보냄
			   uri : 【값】, 이름을 찾는 경우 이름을 알려줌

	객체 생성(JSONObject)
		JSON은 Map 구조이기 때문에 Key값과 Value값이 쌍을 이뤄 저장된다.
		따라서 name이라는 Key와 Value가 한 쌍을 이루어서 저장된다.
		내부 JSON 객체에는 요소들을 put(K, V)을 사용해서 넣어주고,
		외부 JSON 객체로 만든 후 하나로 묶어서 관리한다.

		{
			외부 JSON요소 이름(K) : [
				{내부 JSON 요소 이름(K) : 요소 값(V)},
				...
			](V)
			...
		}
		따라서 JSON은 【내부에서 외부 순서대로 데이터를 생성】하게 된다.
	
	객체 파싱(JSONParser)
		【JSON객체에 있는 정보를 문자열로 전송받았을 때】 파싱 작업이 필요하다.
		이 때 데이터가 망가질 수 있기 때문에 별도의 예외처리를 해주어야 한다.
		생성 시 내부에서 외부로 생성했다면 반대로 외부에서 내부 순서대로 접근해야 한다.

		JSONParser 파서객체명 = new JSONParser();
		JSONObject 객체명 = (JSONObject)파서객체명.parse(JSON객체.toJSONString());

		객체명.get(K) == value 값

※ json-simple-1.1.1.jar 다운로드 링크
	https://code.google.com/archive/p/json-simple/downloads
	다운받고 build path의 Libray에 추가해준다.

※ 만들 때는 untitled Text File로 만들고 저장을 .json으로 해준다.
	글씨 색이 안바꾸면 json파일 우클릭 > Open With... > JSON Editor를 다시 클릭한다.

※ JSON.parse(request.responseText) : 매개값을 JSON 타입으로 바꿔준다.

※ setInterval(function(){}, 밀리초) : 밀리초마다 한번씩 실행되는 함수

※ setTimeout(function(){}, 밀리초) : 밀리초 후에 실행되는 함수

※ clearInterval(객체명) : 선언된 setInterval 객체를 없애주는 함수
-----------------------------------------------------------------------------------
Cookie
	컴퓨터 어딘가의 로컬 저장소에 저장되어 있다.
		※ 로컬 저장소 : 하드디스크, USB 등

	웹 브라우저가 보관하고 있는 데이터로,
		※ 웹 브라우저 : 크롬, 익스플로러 등
	【웹 서버에 요청을 보낼 때 쿠키를 헤더에 담아서 전송한다.】
	웹 브라우저는 쿠키가 삭제되기 전까지 웹 서버에 쿠키를 전송한다.

	장점
		클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.

	단점
		정보가 사용자 컴퓨터에 저장되기 때문에 보안에 위협받을 수 있다.
			컴퓨터가 해킹당하면 모든 정보가 위험해진다.
		데이터 저장 용량에 한계가 있다.
		일반 사용자가 브라우저 내의 기능인 "쿠키 차단"을 사용했을 경우 쿠키는 무용지물이 된다.

	동작 방식
		1) 쿠키 생성
			웹 서버에서 쿠키를 생성하고
			쿠키에 응답 데이터를 담아서 웹 브라우저에 전송한다.

		2) 쿠키 저장
			웹 브라우저는 응답 데이터를 담고 있는 쿠키를
			메모리나 파일로 저장한다.

		3) 쿠키 전송
			웹 브라우저는 쿠키 요청이 있을 때마다 웹 서버에 전송한다.
			웹 서버는 쿠키를 사용해서 필요한 작업을 수행할 수 있다.

		※ 웹 서버에서 쿠키를 생성하고 응답 데이터를 담아서 웹 브라우저로 전송 >
		   웹 브라우저에서 쿠키를 메모리나 파일로 저장 >
		   쿠키 요청이 있을 때마다 웹 브라우저에서 웹 서버로 전송 >
		   웹 서버에서 쿠키를 사용

	쿠키 생성 및 사용 방식
		1) 쿠키를 생성하고 response 객체에 담는다.
			Cookie cookie = new Cookie("쿠키이름", "쿠키값"); //Map
			response.addCookie(cookie);
				※ addCookie() : Header의 Cookie 저장공간에 쿠키를 추가하는 것

			※ 인코딩이 필요할 경우
				String str = URLEncoder.encode("값", "UTF-8");
				Cookie cookie = new Cookie("쿠키이름", str);
				response.addCookie(cookie);
				
				※ 전송하는 쪽에서 인코딩한다.

		2) 쿠키 유무를 확인하고 쿠키의 값을 얻어온다.
			//Header에서 Cookie를 가져온다.
			String cookie = request.getHeader("Cookie");
			//cookie의 유무 확인
			if(cookie != null){
				//Cookie배열에 모든 쿠키를 담는다.
				Cookie[] cookies = request.getCookies();
				//보통 빠른for문을 사용
				for(Cookie c : cookies){
					c.getName();
					c.getValue();
				}
			}
		
		3) 쿠키를 수정, 삭제한다.
			String cookie = request.getHeader("Cookie");
			if(cookie != null){
				Cookie[] cookies = request.getCookie();
				for(Cookie c : cookies){
					//수정
					//수정할 쿠키이름이 있는지 확인
					if(c.getName().equals("쿠키이름")){
						//Map에서 같은 이름의 Key에 다른 value를 넣으면
						//덮어쓰기 즉, 수정이 된다.
						Cookie new_cookie = new Cookie("쿠키이름", "쿠키값");
						//수정한걸 적용한다.
						response.addCookie(new_cookie);
					}
					//삭제
					//유통기한을 0으로 만들어 삭제한다.
					c.setMaxAge(0);
					//삭제한걸 적용한다.
					response.addCookie(c);
				}
			}
			※ setMaxAge() : 유통기한 같은 것

※ 파라미터보다 쿠키가 더 생명주기가 길다.
	파라미터는 A에서 B로 보냈을 때 C에서 사용할 수 없지만,
	쿠키는 모든 곳에서 사용이 가능하기 때문이다.

※ 쿠키는 주로 비회용에 사용한다.
-----------------------------------------------------------------------------------
Session
	내장 객체로서 브라우저마다 한 개씩 존재하고, 고유한 SessionID 생성 후 정보를 추출한다.

	장점
		JSP에서만 접근할 수 있기 때문에 보안성이 좋다.
		저장 용량의 한계가 없다.

	단점
		서버에 데이터를 저장하므로 서버에 부하가 걸릴 수 있다.

※ 특정 세션만 삭제
	session.removeAttribute("userid");
   세션 전체 삭제	
	session.invalidate();

※ 쿠키보다 세션을 쓰는 것이 더 안정적이지만
	세션을 저장할 공간이 부족할 경우 쿠키가 사용된다.

※ 삭제되거나 수정되어도 문제가 없는 데이터 혹은 개인의 고유한 정보들은 보통 쿠키를 사용한다.
-----------------------------------------------------------------------------------
DBCP(DataBase Connection Pool)
	※ Connection Pool : Connection이 모여있는 곳

	사용자 요청이 있을 때마다 DB 연결을 한다면 코드가 복잡해지며,
	많은 요청이 있을 때 연결 속도가 저하될 수 있다.
	따라서 【미리 Connection을 만들어 두고,
	필요 시 저장된 공간에서 가져다 쓴 후 반환하는 기법】이다.

	풀에 관한 설정은 Servers > context.xml
		<Resource
			name="jdbc/oracle"
			auth="Container"
			type="javax.sql.DataSource"
			driverClassName="oracle.jdbc.OracleDriver"	
				안되는 경우 oracle.jdbc.driver.OracleDriver
			url="jdbc:oracle:thin:@127.0.0.1:1521:XE"
			username="hr"
			password="hr"
			maxActive="20"
			maxIdle="20"
			maxWait="-1"
		/>

		name : dbcp name
		username : oracle user name
		password : oracle user password
		maxActive : 연결 최대 허용 개수
		maxIdle : 항상 연결상태를 유지하는 개수
		※ maxActive와 maxIdle는 같은 값으로 주는 것이 일반적이다.

	여기서 작성한 후 context.xml을 복사해서 lib 폴더에 붙여넣기 한다.

※ Connection Pool에서 close()는 해제가 아니라 반납을 의미한다.

※ DBCP jar 경로
	C:\apache-tomcat-8.5.63\lib
	tomcat-dbcp.jar를
	lib폴더에 붙여넣기 한다.

JNDI(Java Naming and Directory Interface)
	디렉토리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API이며,
	【외부에 있는 객체를 가져오기 위한 기술】이다.

	가장 중요한 객체는 【dataSource】

사용 예시
	public class Test{
		Context context; // naming 패키지
		DataSource dataSource; // sql 패키지

		public void test(){
			//현재 환경의 naming context 획득하기
			context = new InitialContext(null);
				// null을 꼭 넣는다.

			//DataSource 찾기
			dataSource = (DataSource)context.lookup("java:comp/env/jdbc/oracle");
				// context.xml에 설정한 name

			//Connection 얻어오기
			conn = dataSource.getConnection();

			나머지는 동일하다.
		}

※ InitialContext()
	웹 어플리케이션이 처음으로 배치될 때 설정되고,
	모든 설정된 엔트리와 자원은 JNDI namespace의 java:comp:env 부분에 놓인다.
-----------------------------------------------------------------------------------
MyBatis
	소스코드 안에 SQL문을 작성하면 코드가 길어지고 섞여 있어서
	유지보수 및 분업이 쉽지 않아진다.
	MyBatis는 기존 JDBC방식과는 달리
	【SQL문을 JAVA파일이 아닌 XML파일에 작성함으로써】
	코드가 줄어들고, SQL문 수정이 편해진다.
	또한 【DBCP를 사용하여 커넥션을 여러 개 생성】하기 때문에
	JDBC만 사용하는 것 보다는 작업 효율과 가독성이 좋아진다.

	※ iBatis는 2.5버전(하위버전)이며 JDK4버전 이상에서만 사용할 수 있다.
		MyBatis는 3.0버전이며 JDK5버전 이상에서만 사용할 수 있다.
		iBatis와 MyBatis의 차이점은 몇 개의 문법 및 사용 용어(명칭) 변경 등이 있다.
			(거의 차이가 없다. iBatis를 상속받은게 MyBatis)

	작동 순서
		1) 응용 프로그램이 SqlSessionFactoryBuilder를 통해
			SqlSessionFactory를 build 하도록 요청한다.
		2) SqlSessionFactoryBuilder는 SqlSessionFactory를 build하기 위해
			MyBatis 구성파일(MyBatis Config File, 설계도)를 읽는다.
		3) SqlSessionFactoryBuilder는 MyBatis 구성 파일의 정의에 따라
			SqlSessionFactory를 생성하고 요청이 들어올 때까지 대기한다.

		※ 여기까지가 시작하자마자 실행되는 부분
			프로그램이 시작되고 1번만 실행되면 되기 때문에 statc 블록에 작성한다.

		4) 클라이언트가 응용 프로그램에 대한 프로세스를 요청한다.
		5) 응용 프로그램은 SqlSessionFactoryBuilder를 사용하여 빌드된 SqlSessionFactory로
			SqlSession을 생성하고 이를 Application에 반환한다.
		6) 응용 프로그램이 SqlSession에서 매퍼 인터페이스의 구현 개체를 가져온다.
		7) 응용 프로그램이 매퍼 인터페이스의 메소드를 호출한다.
		8) 매퍼 인터페이스의 구현 개체가 SqlSession의 메소드를 호출하고 SQL실행을 요청한다.
		9) SqlSession은 매핑 파일에서 실행할 SQL을 가져와서 SQL을 실행한다.

	설치
		https://blog.mybatis.org/p/products.html
		mybatis-3.5.4.zip파일 다운로드
		이클립스 실행해서 mybatis-3.5.4.jar를 Build Path랑 WEB-INF에 추가하기

	config.xml
		<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>
		     //alias 생성하기
		     <typeAliases>
		          <typeAlias type="패키지명.클래스명" alias="별칭"/>
		     <typeAliases>

		     //DBMC 환경설정
		     <environments default="">
		          <environment id="">
		               <transactionManager type="JDBC"/>
		               <dataSource type="POOLED">
		                    <property name="driver" value="oracle.jdbc.OracleDriver"/>
		                    <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		                    <property name="username" value="hr"/>
		                    <property name="password" value="hr"/>
		               </dataSource>
		          </environment>
		     </environments>

		     //사용할 mapper 등록하기
		     <mappers>
		          <mapper resource="패키지명/namespace에 적은 이름.xml"/>
		     </mappers>
		</configuration>
		
	SQL문 작성하는 xml
		파일명은 테이블명과 동일하게 작성한다.
		PreparedStatement의 executeXXX()를 사용해서 실행되는 구조

		<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http//mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="이 mapper의 이름">
		     //select는 매개변수의 타입(parameterType)과 리턴 타입(resultType)을 적어준다.
		          insert, update, delete는 resultType을 생략한다.
		     //타입은 직접 사용할 경우 패키지명.클래스명(전체경로, 확장자 제외)으로 사용한다.
		     //"_"가 붙어있는건 원시타입, 붙어있지 않으면 클래스타입
		     //string이 첫 글자가 대문자가 아닌 이유는 java.lang.String의 Alias이기 때문이다.

		     <select id="객체명" parameterType="string" resultType="_int">
		          //"?"대신 #{필드명}을 쓴다.
		          //";"는 반드시 생략한다.
		          쿼리문 작성
		     </select>
		</mapper>

	SqlMapConfig.java
		//여기가 시작하자마자 실행되는 부분
		private static SqlSessionFactory ssf;

		//static 블록 : 딱 한 번만 실행된다.
		static {
		     try {
		          //config.xml 경로 작성
		          String resource = "./com/koreait/mybatis/config/config.xml";
		          //해당 경로에 있는 config.xml을 객체로 읽어오기
		          Reader reader = Resources.getResourceAsReader(resource);
		          //전달한 config.xml 객체를 토대로 Factory 빌드
		          ssf = new SqlSessionFactoryBuilder().build(reader);
		     } catch (IOException e) {
		          System.out.println(e.getMessage());
		          throw new RuntimeException();
		     }
		}

		public static SqlSessionFactory getSqlMapInstance(){
		     return ssf;
		}

	DAO.java
		SqlSessionFactory ssf = SqlMapConfig.getSqlMapInstance();
		SqlSession session;

		public DAO(){
		     //객체화 하자마자 SqlSession이 할당된다.
		     //모든 메소드마다 SqlSession을 할당하지 않기 위해 기본 생성자에 한 것
		     //openSession의 매개값은 Auto Commit 여부로
		          default는 false
		     session = ssf.openSession(true);
		}

		session.selectOne("namespace명.id", ?에 넣을 값);
		검색 시 결과가 하나면 selectOne(), 결과가 여러 개면 selectList()를 사용한다.

	※ 모든 작업 전에는 해당 데이터가 있는지 없는지부터 검색한다.
	※ 하나의 파일에는 하나의 언어만 쓰는게 최고의 개발이다.
-----------------------------------------------------------------------------------
EL문과 JSTL문(페이지 가독성 상승)
	자바 구문을 라이브러리 형태로 만들어 놓고 필요할 때마다 태그로 꺼내쓰는 기술이다.
	JSP페이지 내에서 자바코드와 HTML코드가 섞여 있으면 가독성이 떨어지고 복잡해진다.
	EL문과 JSTL문을 사용하면 【HTML과 태그로만 구성된 소스코드】를 볼 수 있다는 장점이 있다.
	즉, 스크립트 태그를 사용하지 않아도 된다.
	※ HTML이 아니라 JSP를 쓰는 이유
		HTML은 컴파일이 되지 않기 때문이다.

	EL문(Expression Language)
		값을 간결하고 간편하게 출력할 수 있도록 해주는 기술

		<%=name%> → ${name}
		<%=member.getName()%> → ${member.getName()}
		※ 【jQuery는 $(), EL문은 ${}】

		값을 찾을 때에는 작은 Scope에서 큰 Scope 순서로 찾는다.
		page → request → session → application

		보관소 검색 범위 지정
			${key}처럼 보관소를 지정하지 않으면 모든 보관소를 검색하지만
			특정 보관소에서만 찾도록 지정할 수 있다.
				pageScope		JspContext
				requestScope		ServletRequest
				sessionScope		HttpSession
				applicationScope		ServletContext

				${requestScope.key}와 같이 쓰면 ServletRequest에서만 검색한다.

		원하는 Scope의 변수를 찾을 때 아래와 같이 사용한다.
		${param.name} : 전달받은 데이터 중 name을 찾는다.
		${request.name} : request 안에서 name을 찾는다.
		${session.name} : session 안에서 name을 찾는다.
			※ 범위가 생략됐을 경우 작은 범위에서 큰 범위로 찾는다.

		※ 외부에서 전달된 파라미터의 종류
			1. request객체에 setAttribute()를 하면
				requestScope에 등록된다.
				${key}, ${request.key}로 사용한다.

			2. 쿼리 스트링으로 파라미터 전달
				${param.key}로 사용한다.

		※ setAttribute의 key 이름이 같을 경우 Scope가 작은 범위에 있는 것을 가져온다.
			ex) request와 session에 A라는 setAttribute("A", value);를 했을 경우
				${A}의 결과는 request의 Attribute

		※ getAttribute()의 값은 문자열 타입이지만,
			EL문에서는 숫자는 숫자, 문자열은 문자열로 타입을 인식한다.

		※ paramValues : 파라미터값을 배열로 얻어올 때 사용
				1개의 key에 여러 개의 value
				사용 예) ${paramValues.key[index]}
					null일 경우 출력하지 않는다.

		※ pageContext.findAttribute("key");
			서블릿 보관소를 순서대로 뒤져서 객체를 찾는다.
			마지막 보관소에도 없다면 null을 리턴한다.
			
			JspContext → ServletRequest → HttpSession → ServletContext

		※ pageContext, Request
			setAttribute("key", value) : 추가
			getAttribute("key")	: 값 불러오기 == ${requestScope.key}와 같다.
			removeAttribute("key") : 삭제

		   Session
			추가, 값 불러오기, 삭제는 동일하다.
			invalidate() : 등록된 모든 session 삭제

		연산자
			【${}안에서 연산도 할 수 있다.】★
		
			/,	div	${10/3} == ${10 div 3}
			%,	mod
			&&,	and
			||,	or
			>,	lt(less than)
			<,	gt(greater than)
			>=,	le(less or equal)
			<=,	ge(greater or equal)
			==,	eq(equal)
			!=, 	ne(not equal)
			empty : 값이 비어있으면 true, 값이 있으면 false
				ex) <c:if test="${empty param.name}">
			!,	not

	JSTL문(Jsp Standard Tag Library)
		연산이나 조건문, 반복문 등을 편하게 처리할 수 있으며,
		【JSP페이지 내에서 자바코드를 사용하지 않고도 로직을 구현】할 수 있도록 효율적인 방법을 제공해준다.

		JSP에서 JSTL 사용
			<%@ taglib uri="http://java.sun.com/jstl/core" prefix="c"%>
			만약 이게 오류나면
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

		core태그의 종류
			<c:set var="변수명" value="값">	변수에 값 대입
			<c:out value="값">			값 출력
							속성에 default=""를 주면 값이 없을 때 default가 출력
			<c:if test="">			if문(else if 없음)
			<c:choose>			switch문의 시작
			<c:when test="">			switch문의 case(break는 자동으로 해준다.)
			<c:otherwise>			switch문의 default
			<c:forEach var="변수명" items="배열, 컬렉션">		반복문(빠른for문)
			<c:forEach var="변수명" begin="시작값" end="끝값">	반복문
			<c:remove>	선언한 변수 해제
					ex) <c:remove var="nation" scope="page"/>

			스크립틀릿 반복문
				<%
					for(초기식; 조건식; 증감식;){
						소스코드
					}
				%>

			JSTL 반복문 방법1(빠른 for문)
				<c:forEach var="변수" items="${}">
					HTML 코드
				</c:forEach>

			JSTL 반복문 방법2
				<c:forEach var="변수" begin="시작값" end="끝값">
					※ step : 몇 씩 증가하는지 정할 수 있는 속성
						default는 1이고 생략 가능하다.
					HTML 코드
				</c:forEach>
	
			<c:forEach varStatus="상태용 변수">
				<c:out value="${상태용 변수.index}"/> //0부터의 순서
				<c:out value="${상태용 변수.count}"/> //1부터의 순서
				<c:out value="${상태용 변수.begin}"/>
				<c:out value="${상태용 변수.end}"/>
				<c:out value="${상태용 변수.step}"/>
				<c:out value="${상태용 변수.first}"/>
				<c:out value="${상태용 변수.last}"/>
				※ first와 last는 boolean타입
			</c:forEach>

			<c:out>, ${}의 차이
				EL문(${})만 사용하게 되면, html이나 스크립트가 실행될 수 있기 때문에
				보안상 <c:out>의 escapeXml옵션을 사용하기 위해서 JSTL을 사용한다.
				escapeXml은 default가 true이며 값에 html이나 스크립트가 작성되어도
				실행 가능한 【명령어(태그)가 아닌 문자열 값으로 인식】하게 된다.

				엄격한 태그 규칙을 위해 사용되기도 하며,
				모든 표현은 태그 안에 작성하는 것을 원칙으로 한다.(태그로 통일)

	※ $앞에 \를 붙이면 $를 문자로 인식한다.

	※ 라이브러리 다운로드 경로	
		http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/
		jakarta-taglibs-standard-1.1.2.zip 다운로드
		lib 폴더에 jar 2개를 lib에 복사 붙여넣기 한다.

	※ 조건식 : 참 또는 거짓 중 하나의 결과가 나오는 식

	※ 엔터 막기
		엔터를 누르면 onclick으로 안가고 바로 submit으로 이동한다.
		그걸 막기 위해서
		document.addEventListener('keydown', function(key){
			if(key.keyCode == 13){
				key.preventDefault();
				※ preventDefault() : 동작을 중단시킨다.
			}
		});
-----------------------------------------------------------------------------------
JSP 방식
	a.jsp	→	b.jsp	→	c.jsp
	form제공		연산		응답

	각 페이지마다 필요 시 자바코드가 작성되며,
	DB와 연결하는 코드도 JSP파일 안에서 모두 작성된다.
	분리되어 있지 않기 때문에 규모가 작은 프로젝트에 어울리는 방식이다.
	코드가 확장될 수록 가독성이 떨어지고 분업과 유지보수가 좋지 않지만
	페이지 수가 작은 프로젝트에서는 효율적이다.

MVC
	다른 종류의 패턴도 있지만 JAVA에서는 MVC가 가장 적합하다.

	[model1 방식]
		M (V C)
		a.jsp	→	b.jsp	→	c.jsp
				  ↓
				 DAO

		b.jsp에서 DAO를 호출함으로써 자바코드가 섞이게 된다.
		선언은 분리되어 JAVA페이지에 구현되기 때문에
		JSP 내의 JAVA 코드 양이 줄어들지만
		【결국 사용은 JSP페이지에서 하기 때문에 Controller와 View가 섞이게 된다.】
		페이지가 확장될 수록 유지보수가 상대적으로 좋지 않지만 설계는 쉽다.

	[model2 방식]
		M V C
						1.Redirect   2.Forward
		a.jsp → web.xml → Front-Controller →→→→→→→→→→→→→ c.jsp
				          ↕
				          ↕
				          ↕
				     Controller
				          ↕
				          ↕
				          ↕
				         DAO
				          ↕
				          ↕
				          ↕
				          DB

		a.jsp에서 다음 페이지로 이동하기 전에 필요한 비지니스 로직을 완벽히 분리하여 관리한다.
		사용자가 정의한 확장자를 페이지 이동 주소(URL)에 작성하게 되면
			ex) http://www.naver.com/news.me
		서블릿이 web.xml에 가서 경로를 찾는다.
		web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에
		【*.me】 방법을 사용해서 .me가 붙은 모든 요청을 하나의 경로로 보내주도록 설정해 놓는다.
		이 경로를 알맞는 Front-Controller.java 경로로 설정해 놓는다.
			※ 보통 테이블 하나당 하나의 Front-Controller를 만든다.
				즉 테이블이 여러 개면 Front-Controller도 여러 개
		Front-Controller에서는 .me 앞의 요청명으로 어떤 로직을 수행할 지를 판단하도록 분기처리를 한다.
			ex) www.naver.com/【news.me】 이 부분으로 분기처리
			※ 분기처리 : if, switch
		비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고
		유지보수 및 재사용이 어렵기 때문에 요청별 Controller를 만들어서 execute() 메소드를 구현한다.
			※ Controller는 Controller, Action, Motion 등으로 파일명을 만든다.
			※ 요청이 여러 개면 Controller도 여러 개
			※ 일치하는 Controller가 없을 경우 404.jsp로 이동
		하지만 execute() 메소드는 모든 Controller에서 구현해야 하기 때문에
		Action이라는 이름의 인터페이스로 선언하고 추상 메소드로 execute(req, resp)를 선언한 뒤
		모든 Controller에서 implements 한다.
		Controller에서는 DB, 연산, 응답방식, 응답페이지를 설정하는데
		DB에 관련된 작업은 DAO에 메소드로 선언한 뒤 Controller에서 사용한다.
		내부 작업이 모두 완료되면 페이지 이동을 할 것인지, 어떤 방식으로 전송할 것인지,
		그리고 어디로 이동할 것인지를 결정해서 리턴해야 한다.
		이에 관련된 필드를 ActionForward라는 클래스를 만들어서 execute() 메소드의 리턴 타입으로
		지정하여 Controller의 execute() 메소드를 사용하는 Front-Controller에 리턴해준다.
			※ ActionForward의 필드 : boolean isRedirect, String path
		Front-Controller에서는 ActionForward 객체에 담긴 결과에 맞게 처리한 후 view로 이동하게 된다.

		위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에 반영했을 때에는
		오히려 좋지 않은 결과를 초래하기 때문에 맞는 목적으로 선택하여 설계해야 한다.

	[model2의 전송방식]
		JSP와 Servlet에서 페이지 이동을 처리할 때 두 가지 방식 중 하나를 사용한다.
		
		Redirect
			Web Brower → 결제 페이지(현재 페이지) → 새로 고침 → 결제 페이지(새로운 페이지)

			클라이언트가 요청했을 때 【이전의 값이 남아있지 않도록】 하기 위해 사용한다.
				회원가입, 글 작성, 결제 등

			Redirect는 절대경로(contextPath)를 붙여서 보내준다.

			response.sendRedirect(forward.getPath()); 사용


		Forward
			Web Brower → 검색 페이지(현재 페이지) → 검색 결과 페이지(검색한 키워드 값 유지, 전달)

			클라이언트가 request 객체를 통해 【값을 넘겨 주어야 할 때 혹은 단순 조회를 요청할 때】 사용한다.
				목록, 검색 등
			Redirect보다 성능이 좋다.

			RequestDispatcher 객체명 = request.getRequestDispatcher(forward.getPath());
			객체명.forward(req, resp); 사용

		※ 전송 방식이 뭔지 모르겠다 싶으면 일단 Forward를 쓰고,
			새로운 페이지를 열어야겠다 싶으면 Redirect를 쓴다.

		※ Forward와 Redirect의 차이점
			Forward : 현재 실행중인 페이지와 forward에 의해 호출될 페이지는
					request, response 객체를 공유한다.
					URL이 변하지 않는다.(페이지 이동마다 URL에 누적)
			
			Redirect : 새로운 페이지에서는 request, response 객체가 새롭게 생성된다.
					URL이 변한다.

	※ MyBatis를 쓰기 위해 name은 VO의 이름과 동일하게 만들도록 한다.
		테이블의 컬럼명, jsp, VO 등

	※ contextPath : www.naver.com같이 요청 앞에 반복되는 주소, 절대 경로
			request.getContextPath()로 얻어온다.

	※ 내장 객체 out과 PrintWriter out = response.getWriter();는 같다고 볼 수 있지만
		내장 객체 out은 jsp파일이 서블릿으로 변환할 때 웹 컨테이너가 자동으로 메모리에 할당하는 것이라서
		<% %>안에서만 사용할 수 있다.
		.java에서 out을 사용하려면 PrintWriter를 사용해야 한다.

	※ resp.setCharacterEncoding("UTF-8");
	   resp.setContentType("text/html; charset=UTF-8");
		이 두개는 PrintWriter out = resp.getWriter();보다
		위에 있어야 적용된다.
-----------------------------------------------------------------------------------
게시판
	※ 게시글을 불러올 때 시퀀스를 사용하면 규칙성 있게 수가 들어있지 않아서 
		중간중간 비는 경우가 발생하기 때문에 ROWNUM을 사용한다
		(INSERT 하고 DELETE를 하면 1, 2, 3, ... 이 아니라 1, 2, 4, ... 가 된다).
	
	※ req.setCharacterEncoding("UTF-8");
	   resp.setCharacterEncoding("UTF-8");
		필요없어도 일단 쓰고 시작한다.

	※ fn:length(Iterator)
		Iterator의 길이를 구하는 함수
		<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
		위에 디렉티브 태그를 써야 사용할 수 있다.

	※ 정렬에는 수직정렬과 수평정렬이 있다.
		align은 수평정렬
			left, center, right
		valign은 수직정렬
			top, middle, bottom

	※ 파라미터로 받은 값에 접근할 때에는 #{} 또는 ${}를 사용하여 가져온다.
		1. #{}
			받아온 파라미터의 타입에 상관없이 【String타입】으로 변경된다.
			사용자가 직접 입력한 값에 사용하는 것이 좋다(보안에 유리하다).
			이것만 써도 다 해결이 된다.

		2. ${}
			받아온 파라미터의 타입을 그대로 【유지】한다.
			사용자가 직접 입력한 값을 전달받을 때에는 사용하지 않는 것이 좋다
				(쿼리 주입때문에 보안이 취약하다).
			테이블이나 컬럼명을 파라미터로 받을 때 사용한다.

	※ DB에 등록된 게시글을 페이지에 출력할 갯수만큼 가져오기
		<select id="listAll" parameterType="hashmap" resultType="boardVO">
			// DB에서 파라미터로 전달받은 startRow부터 endRow까지 게시글 가져오기
			SELECT * FROM
				// 내림차순으로 바꾼 데이터에 ROWNUM을 붙여주기
				(SELECT ROWNUM R, D.* FROM
					// 오름차순으로 하는 경우 최신 글이 마지막에 나오기 때문에
					// 내림차순으로 변경하여 최신 글이 1번으로 나오게 한다.
					(SELECT * FROM TABLE_BOARD ORDER BY BOARDNUM DESC) D) B
			WHERE B.R BETWEEN #{startRow} AND #{endRow}
		</select>
		
	※ Controller 이름에 Ok가 붙으면 연산이 필요하다는 의미
-----------------------------------------------------------------------------------
※ Java 변수를 Javascript로 가져오는 법
	<%String check = request.getParameter("check")%>
	【<input type="hidden" name="check" value="<%=check%>">】
	<script>에서 var check = "<%=check%>";를 하면
	jsp 파일 내부에서만 쓸 수 있다.
	.js 파일에 작성하고 불러오면 사용할 수가 없기 때문에 위에껄 사용한다.

※ File > Open Projects From File System...에서 폴더를 추가해서 가져올 때
	파일에 오류가 발생할 경우
	프로젝트 우클릭 > Build path > Configure Build path... > Libraries > 
	오류나는 JRE System Library 클릭하고 Remove > 
	Add Library... > JRE System Library > Next > Finish > Apply >
	Order and Export > Select All > Apply 

※ .jsp에서 for문을 사용할 때 "}"도 자바 코드이기 때문에 <%%>안에 작성한다.
	<% for(int i=0; i<5; i++){%>
		HTML 작성
	<% } %>

※ 우편 번호 태그 
	https://www.poesis.org/postcodify/guide/example

※ form태그의 name.id.focus();
	id로 커서가 이동한다.

※ form태그의 name.submit();
	form태그의 action으로 이동한다.
-----------------------------------------------------------------------------------
※ 아이디, 비밀번호 정규식
	var frm = document.joinForm;
	
	if(frm.id.value == ""){
		alert("아이디를 입력해주세요.");
		frm.id.focus();//커서가 id로 이동한다.
		return false;
	}
	
	//아이디는 4자 이상, 16자 이하로 입력
	if(frm.id.value.length < 4 || frm.id.value.length > 16){
		alert("아이디는 4자 이상, 16자 이하로 입력해주세요.");
		frm.id.focus();
		return false;
	}
	
	if(frm.name.value == ""){
		alert("이름을 입력해주세요.");
		frm.name.focus();
		return false;
	}
	
	if(frm.password.value == ""){
		alert("패스워드를 입력해주세요.");
		frm.password.focus();
		return false;
	}else{
		//8자리 이상, 대문자/소문자/숫자/특수문자 모두 포함되어 있는 지 검사
		var reg = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/;
			    //대문자      소문자       숫자	   특수문자	8자리이상
		//한글은 있는 지 검사
		var hangleCheck = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;
		
		//test()는 정규식에서 쓰는 메소드
		if(!reg.test(frm.password.value)){
			//정규식 조건에 맞지 않으면
			alert("비밀번호는 8자리 이상이어야 하며, 대문자/소문자/숫자/특수문자 모두 포함해야 합니다.");
			frm.password.focus();
			return false;
		}
		
		//같은 문자를 4번 이상 사용할 수 없다.
		else if(/(\w)\1\1\1/.test(frm.password.value)){
			//같은 문자가 4개 이상 있다면
			alert("같은 문자를 4번 이상 사용할 수 없습니다.");
			frm.password.focus();
			return false;
		}
		
		//비밀번호에 아이디가 포함되어 있을 수 없다.
		//search()는 문자열에서 쓰는 메소드
		//indexOf()와 비슷하다.
		//포함되어 있지 않으면 -1을 리턴
		else if(frm.password.value.search(frm.id.value) > -1){
			//-1은 아이디가 비밀번호에 없다는 뜻
			//따라서 -1이 아닐 때(아이디를 비밀번호에서 찾았을 때) 들어옴
			alert("비밀번호에 아이디를 포함할 수 없습니다.");
			frm.password.focus();
			return false;
		}
		
		//한글
		else if(hangleCheck.test(frm.password.value)){
			//정규식 조건에 맞으면
			alert("비밀번호에 한글을 사용할 수 없습니다.");
			frm.password.focus();
			return false;
		}
		
		//비밀번호에 공백을 포함할 수 없다.	\s는 공백을 의미한다.
		else if(frm.password.value.search(/\s/) != -1){
			//비밀번호에서 공백을 찾았다면 
			alert("비밀번호에 공백없이 입력해주세요.");
			frm.password.focus();
			return false;
		}
		
		//비밀번호 확인
		if(frm.password.value != frm.password_re.value){
			alert("패스워드를 확인해주세요.");
			frm.password_re.foucs();
			return false;
		}
-----------------------------------------------------------------------------------