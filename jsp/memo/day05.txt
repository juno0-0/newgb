MyBatis
	소스코드 안에 SQL문을 작성하면 코드가 길어지고 섞여 있어서 
	유지보수 및 분업이 쉽지 않아진다.
	MyBatis는 기존 JDBC방식과는 달리 【SQL문을 XML파일에 작성】함으로써
	코드가 줄어들고, SQL문 수정이 편해진다.
	또한 DBCP를 사용하여 커넥션을 여러 개 생성하기 때문에
	JDBC만 사용하는 것 보다는 작업 효율과 가독성이 좋아진다.

	※ibatis는 2.5버전(하위버전)이며 JDK4버전 이상에서만 사용할 수 있다.
		MyBatis는 3.0버전이며 JDK5버전 이상에서만 사용할 수 있다.
		ibatis와 MyBatis의 차이점은 몇 개의 문법 및 사용 용어(명칭) 변경 등이 있다.

	MyBatis 작동 순서
		1) 응용 프로그램이 SqlSessionFactoryBuilder를 통해
			SqlSessionFactory를 빌드하도록 요청한다.
		2) SqlSessionFactoryBuilder는 SqlSessionFactory를 생성하기 위한 
			MyBatis 구성파일(MyBatis Config File)을 읽는다.
		3) SqlSessionFactoryBuilder는 MyBatis 구성 파일의 정의에 따라
			SqlSessionFactory를 생성한다.
		※ 여기까지가 시작하자마자 실행되는 부분
			프로그램이 시작되고 1번만 실행되면 되기 때문에
			static 블록에 작성한다.
		4) 클라이언트가 응용 프로그램에 대한 프로세스를 요청한다.
		5) 응용 프로그램은 SqlSessionFactoryBuilder를 사용하여 빌드된 SqlSessionFactory에서
			SqlSession을 가져온다.
		6) SqlSessionFactory는 SqlSession을 생성하고 이를 Application에 반환한다.
		7) 응용 프로그램이 SqlSession에서 매퍼 인터페이스의 구현 개체를 가져온다.
		8) 응용 프로그램이 매퍼 인터페이스의 메소드를 호출한다.
			※ 8번을 하기 위해 7번을 한 것
		9) 매퍼 인터페이스의 구현 개체가 SqlSession의 메소드를 호출하고 SQL실행을 요청한다.
		10) SqlSession은 매핑 파일에서 실행할 SQL을 가져와서 SQL을 실행한다.

	MyBatis 설치
		https://blog.mybatis.org/p/products.html
		mybatis-3.5.4.zip파일 다운로드
		이클립스 실행해서 mybatis-3.5.4.jar를 Build Path랑 WEB-INF에 추가하기

	config.xml
		<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
		<configuration>
		     //alias 생성하기
		     <typeAliases>
		          <typeAlias type="패키지명.클래스명" alias="별칭"/>
		     </typeAliases>

		     //DBMS 환경설정하기
		     <environments>			
		          <environment>
		               <transactionManager type="JDBC"/>
		               <dataSource type="POOLED">
		                    <property name="driver" value="oracle.jdbc.OracleDriver"/>
		                    <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"/>
		                    <property name="username" value="hr"/>
		                    <property name="password" value="hr"/>
		               </dataSource>
		          </environment>
		     </environments>

		     //사용할 mapper를 등록한다.
		     //여기 등록된 mapper만 찾아갈 수 있다.
		     <mappers>
		          <mapper resource="패키지명/테이블명.xml">
		     </mappers>
		</configuration>

	테이블명.xml
		파일명은 테이블명과 동일하게 작성한다.
		PreparedStatement의 executeXXX()를 사용해서 실행되는 것

		<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http//mybatis.org/dtd/mybatis-3-mapper.dtd">
		<mapper namespace="테이블명">
		     //매개변수의 타입과 리턴 타입을 적어준다.
		     //타입은 직접 사용할 경우 패키지명.클래스명으로 사용한다.
		     //"_"가 붙어있는건 원시타입, 붙어있지 않으면 클래스타입
		     //string이 첫글자가 대문자가 아닌 이유는 java.util.String의 alias이기 때문이다.
		     <select id="객체명" parameterType="string" resultType="_int">
		          쿼리문 작성
		          //"?"대신 #{변수명}을 쓴다.
		          //";"는 반드시 생략한다.
		     </select>
		     //insert면 <insert>를 사용, delete면 <delete>를 사용 update면 <update>를 사용한다.
		     //insert, delete, update는 resultType을 쓰지 않는다.
		</mapper>

	SqlMapConfig.java
		private static SqlSessionFactory sqlsession_f;

		static {
		     try {
		          //config.xml 경로 작성
		          String resource = "./com/koreait/mybatis/config/config.xml";
		          //해당 경로에 있는 config.xml을 객체로 읽어오기
		          Reader reader = Resources.getResourceAsReader(resource);
		          //전달한 config.xml 객체를 토대로 Factory 빌드
		          sqlsession_f = new SqlSessionFactoryBuilder().build(reader);
		     } catch {
		          System.out.println(e.getMessage());
		          throw new RuntimeException();
		     }
		}

		public static SqlSessionFactory getSqlMapInstance(){
			return sqlsession_f;
		}

	DAO.java
		SqlSessionFactory sqlsession_f = SqlMapConfig.getSqlMapInstance();
		SqlSession sqlsession;

		public DAO(){
		     //객체화하자마자 sqlsession이 할당된다.
		     //모든 메소드마다 sqlsession을 할당하지 않기 위해 기본 생성자에 한 것
		     sqlsession = sqlsession_f.openSession(true); //매개값은 오토 커밋 여부, default는 false
		}

		sqlsession.selectOne("namespace명.id", ?에 넣을 값);
		검색 시 결과가 하나면 selectOne(), 결과가 여러 개면 selectList()를 사용한다.
		마찬가지로 insert면 insert(), delete면 delete(), update면 update()를 사용한다.


※ 모든 작업 전에는 있는지 없는지 검색부터 한다.

※ Mapping : 검색

※ 하나의 파일에는 하나의 언어만 쓰는게 최고의 개발

※ Java Resources가 백
   WebContent가 프론트

※ MyBatis 동작원리
	Application을 실행하면 ①SqlSession Factory Builder가 
	②MyBatis Config File(설계도)를 참고해서
	③SqlSession Factory를 만들고 대기하다가
	요청이 들어오면
	⑴SqlSession Factory가 ⑵SqlSession을 만들고
	⑶Mapping File에서 어떤 Sql문을 실행할지 검색한 후
	⑷SqlSession이 Sql문을 실행한다.

	※ SqlSession : Sql문 1개를 실행시켜주는 애

