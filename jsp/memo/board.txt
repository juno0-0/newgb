어떤 프로젝트는 스크립틀릿을 사용하고
어떤 프로젝트는 JSTL을 사용하므로,
전부 알아두어야 한다.

게시판 목록
1. 게시판 제목
2. 게시판 글쓴이
3. 게시판 번호
4. 작성날짜
5. 조회수
6. 첫번째 페이지
7. 마지막 페이지
8. 현재 페이지
9. 페이지 당 게시글 개수
10. 이전, 다음

1. SELECT ... WHERE #{start} ~ #{end}
	DB에서 나눠서 필요한 정보만 조회

여기서 BOARDNUM을 하면 규칙성 있게 수가 들어있지 않아서 중간중간이 비기 때문에 ROWNUM을 사용한다.
시퀀스가 NEXTVAL로 1씩 증가하긴 하지만 글을 썼다가 지우는 경우 시퀀스가  감소하지 않아서 1,2,3이 아닌 1,2,4가 된다.
<select id="listAll" parameterType="map" resultType="boardVO">
	SELECT * FORM TABLE_BOARD WHERE ROWNUM BETWEEN #{startRow} AND #{endRow} 
</select>


req.setCharacterEncoding("UTF-8");
resp.setCharacterEncoding("UTF-8");
	필요없어도 일단 쓰고 시작하자.


fn:length(Iterator)★★★
	Iterator의 길이를 구하는 함수
	<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %> 써야 사용할 수 있음

정렬에는 수직정렬과 수평정렬이 있다.
	align은 수평정렬
		left center right
	v_align은 수직정렬
		top middle bottom


파라미터로 받은 값에 접근할 때에는 #{} 또는 ${}를 사용하여 가져온다.
	1. #{}
		받아온 파라미터의 【타입에 상관 없이 String타입으로 변경】된다.
		사용자가 직접 입력한 값에 사용하는 것이 좋다(보안에 유리하다).
		이것만 써도 다 해결이 된다.
		
	2. ${}
		받아온 파라미터의 【타입을 그대로 유지】한다.
		사용자가 직접 입력한 값을 전달받을 때에는 사용하지 않는 것이 좋다(쿼리 주입때문에 보안이 취약하다).
		테이블이나 컬럼명을 파라미터로 받을 때 사용한다(동적 쿼리 - spring framework에서 배우자!).
	


<mapper namespace="Board">
	<!-- 여기서 BOARDNUM을 하면 규칙성 있게 수가 들어있지 않아서 중간중간이 비기 때문에 ROWNUM을 사용한다.  -->
	<!-- 시퀀스가 NEXTVAL로 1씩 증가하긴 하지만 글을 썼다가 지우는 경우 시퀀스가  감소하지 않아서 1,2,3이 아닌 1,2,4가 된다. -->
	<!-- FROM WHERE SELECT ORDER BY -->
	<!-- ROWNUM은 반드시 1부터 시작이 되야한다. -->
	<!-- 1. 게시글을 최신 순으로 가져오기 위해서 내림차순 정렬을 하고 -->
	<!-- 2. 내림차순 정렬된 각 행에 ROWNUM을 사용하여 번호를 1부터 순서대로 붙여준다. -->
	<!-- 3. ROWNUM은 반드시 1부터 시작되어야 하기 때문에 모든 ROWNUM이 붙은 테이블로 부터 -->
	<!-- 4. WHERE절을 사용하여 필요한 게시글 정보만 조회한다. -->
	<select id="listAll" parameterType="map" resultType="boardVO">
		SELECT * FROM 
			(SELECT ROWNUM R, D.* FROM
				(SELECT * FROM TABLE_BOARD ORDER BY BOARDNUM DESC) D) B
		WHERE B.R BETWEEN #{startRow} AND #{endRow}
	</select>
	
	<select id="getBoardCnt" resultType="_int">
		SELECT COUNT(*) FROM TABLE_BOARD
	</select>
</mapper>


/board/BoardWriteOk.bo
	Ok가 붙으면 연산이 필요하다는 의미


외부에서 전달된 파라미터의 종류★★★
	1. request객체에 setAttribute()
		requestScope에 등록된다.
		사용 예) ${key}, ${request.key}
						
	2. 쿼리 스트링으로 파라미터 전달
		사용 예) ${param.key}  


주말간 MVC model2 상기시키되 JSTL, EL 빡세게 복습하기 
-----------------------------------------------------------------------------
forward를 사용해야 할 때 : req객체에 데이터를 담아서 전달해야 할 때(다음 페이지에서도 req를 공유한다). 
	FrontController에서 전송할 때 req, resp를 그대로 전달한다.
redirect를 사용해야 할 때 : 전달할 req 데이터가 없고 값을 초기화 하고 싶을 때
	뒤로가기하면 데이터가 남아있긴 하다. 전송을 막아주는 역할만 할 뿐

모델 객체(DTO)로 데이터를 전달하고 그게 안되면 파라미터를 전송한다.


게시글 상세보기
게시글 목록 -> boardNum, page -> BoardView.bo
-> page, BoardVO -> boardView.jsp
1. 사용자가 요청한 게시글 번호를 컨트롤러로 전달
2. 사용자가 머물러 있었던 페이지 번호
3. DB 조회한 결과는 한 개의 게시글 정보가 나오므로
	객체 한 개만 view에 뿌려준다.

게시글 수정
로그인 -> 게시판 목록 -> 게시판 상세보기 -> boardNum
-> 수정 -> BoardVO -> 수정페이지 -> page, boardNum, boardTitle, boardContent -> 수정완료 -> boardNum, page -> 게시판 상세보기

게시글 삭제
게시판 상세보기 -> boardNum, page -> 게시글 삭제 -> page -> 게시글 목록

※ 함수이름과 form의 name이 같으면 함수를 찾을 수 없다는 오류가 발생한다★★★★★

※ 수정이나 삭제는 사실 응답 방식을 redirect로 한다.
-----------------------------------------------------------------------------
첨부파일
	[게시글 작성]
	파일 업로드
		enctype설정 -> MultipartRequest

	[게시글 상세보기]
	파일 다운로드
		다운로드할 파일 클릭 -> 파일이름 -> 해당 파일이 있는 경로 설정
		-> FileInputStream으로 불러오기 -> Header 설정 -> FileOutputStream 준비
		-> 브라우저 판단 -> 출력(다운로드) -> close()

	[게시글 수정]
	- 파일 수정
		첨부파일 전체 삭제(DB, upload) -> 새롭게 추가된 첨부파일 INSERT(DB, upload)

	form의 속성에 enctype="multipart/form-data"
		이 폼에는 파일 타입의 데이터가 있어요라는 의미
		이걸 안쓰면 일반 데이터만 전송되고 첨부파일 데이터가 전송되지 않는다.
			파일 첨부가 있으면 반드시 작성
		multipart 안에 request가 있는 것
		multipart를 선언하고 req를 단독으로 사용하면 무조건 null이 나온다.
			꼭 req 대신 multipart를 쓰도록 하자

	Enumeration
		Iterator같은 것
		파일 순서가 없는 것에 순서를 부여해주는 것
		hasMoreElements() : 값이 없으면 false
		nextElement() : 하나씩 값을 가져온다.

	SELECT BOARD_SEQ.CURRVAL FROM DUAL
		현재 시퀀스를 가져오는 쿼리문

	getFilesystemName()
		서버에 동일한 이름이 있는지 검사후 있으면 변경된 시스템 파일명, 없으면 원본 파일명을 가져온다.

	첨부파일의 이름이 중복이 될 수 없기 때문에 중복이면 DefaultFileRenamePolicy에 의해 이름이 변경된다.
		※ DefaultFileRenamePolicy : 파일 업로드 및 다운로드 정책
					(같은 이름이 존재하면 자동으로 이름이 변경되도록 한다.)

	DefaultFileRenamePolicy 정책이 이름을 중복될 수 없게 바꾸고
	바뀐 이름을 getFilesystemName()로 가져오는 것이다.

	인터넷 익스플로러만 첨부 삭제 버튼을 눌렀을 때 초기화하는 방법이 다르다.
		다른건 value를 ""로 하면 되지만 
		익스플로러는 <input type="file" name="boardFile">를 하나 더 만들어놓고
		초기화 시 빈 인풋태그로 덮어 쓴다.

	데이터를 전송할 때 byte를 쓰는 이유는 컴퓨터의 기본언어가 0과 1로 이루어진 2진수이기 때문이다.

	리눅스 서버로 서비스 제공 시 업로드 경로는 아래와 같이 사용하여 작업한다.
		req.getServletContext().getRealPath("/") : 루트패스

	Preferences -> Workspace에서 Refresh using native hooks or polling를 체크하면
	폴더가 업데이트 될 때마다 자동으로 새로고침이 된다.

댓글
	오토 사이즈(꼭 jQuery 밑에 쓰기)
	<script src="//code.jquery.com/jquery-3.5.1.min.js"></script>
	<script src="https://rawgit.com/jackmoore/autosize/master/dist/autosize.min.js"></script>
	



단톡에 cos.jar 다운받아서 압축풀고 메모장 지우고 파일만 resource 폴더에 남기기
	build path와 lib에 적용





































