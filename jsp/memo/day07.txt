MVC
[model2]
	                                                    1. Redirect    2. forward
	a.jsp -> web.xml -> Front-Controller.java -------------------------> c.jsp
                                                   ↕
                                                   ↕
                                                   ↕
                                            Controller.java
                                                   ↕
                                                   ↕
                                                   ↕
                                                  DAO
                                                   ↕
                                                   ↕
                                                   ↕
                                                   DB		

	a.jsp에서 다음 페이지로 이동하기 전에 필요한 비지니스 로직을 완벽히 분리하여 관리한다.
	사용자가 정의한 확장자를 페이지 이동 주소(URL)에 작성하게 되면
	서블릿이 web.xml에 가서 경로를 찾는다.
		ex) www.naver.com/news.me
	web.xml에 파일 경로를 하나씩 모두 만들게 되면 코드가 길어지기 때문에
	【*.me】 방법을 사용해서 .me가 붙은 모든 요청을 하나의 경로로 보내주도록 설정해 놓는다.
	이 경로를 알맞는 Front-Controller.java 경로로 설정해 놓는다.
		※ 보통 테이블 하나당 하나의 Front-Controller를 만든다.
			테이블이 여러 개면 Front-Controller도 여러 개
	Front-Controller에서는 .me 앞의 요청명으로 어떤 로직을 수행할 지를 판단하도록 분기처리를 한다.
		ex) www.naver.com/【news】.me 이 부분으로 분기처리
		※ 분기처리 : if, switch
	비지니스 로직을 Front-Controller에서 작업하게 되면 마찬가지로 코드가 길어지고
	유지보수 및 재사용이 어렵기 때문에 요청별 Controller를 만들어서 execute() 메소드를 구현한다.
		※ Controller는 Controller, Action, Motion 등으로 파일명을 만든다.
		※ 요청이 여러 개면 Controller도 여러 개 만드는 것
		※ 일치하는 Controller가 없을 경우 404페이지로 이동
	하지만 execute() 메소드는 모든 Controller에서 구현해야 하기 때문에 
	Action이라는 이름의 인터페이스로 선언하고 추상 메소드로 execute(req, resp)를 선언한 뒤
	모든 Controller에서 implements 받는다.
	Controller에서는 DB, 연산, 응답방식, 응답페이지를 설정하는데
	DB, 연산은 DAO에 메소드로 만든 후 Controller에서 메소드를 사용한다.
	내부 작업이 모두 완료되면 페이지 이동을 할 것인지, 어떤 방식으로 전송할 것인지,
	그리고 어디로 이동할 것인지를 결정해서 리턴해야 한다.
	이에 관련된 필드를 ActionForward에 만들어 놓은 후 execute() 메소드의 리턴 타입을
	ActionForward로 지정하여 Controller의 execute()를 사용하는 Front-Controller에 리턴해준다.
		※ ActionForward의 필드 : boolean isRedirect, String path
	Front-Controller에서는 ActionForward 객체에 담긴 결과에 맞게 처리한 후 view로 이동하게 된다.

	위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에 반영했을 때에는
	오히려 좋지 않은 결과를 초래한다.
	따라서 맞는 목적으로 선택하여 설계해야 한다.
	
	※Front-Controller는 모든 Controller를 제어한다.
---------------------------------------------------------------------------------------------
	총정리
		a.jsp라는 파일에서 www.naver.com/news.na를 URL에 작성하면
		서블릿이 web.xml에 가서 .na에 맞는 Front-Controller로 이동하고,
		Front-Controller에서 www.naver.com/news.na의 news부분을 분기처리하여
			※ getRequestURI(), getContextPath(), substring()을 이용하여
			   전체 경로에서 절대경로를 제외한 부분을 얻는다.
		일치하는 Controller의 execute(req, resp)를 사용한다.
		Controller에서는 Action 인터페이스를 implements 받은 후 execute()를 재정의하고
		DAO의 메소드를 사용 하여 결과를 얻은 뒤 결과에 맞게
		ActionForward라는 객체의 필드를 초기화한 뒤 ActionForward 타입의 객체를 리턴한다.
		Front-Controller는 Controller.execute(req, resp)에서 리턴받은 ActionForward를 참고하여
		알맞는 전송 방식을 통해 view로 이동하게 된다.

		Front-Controller : Controller의 execute()를 실행
			           execute()에서 리턴받은 ActionForward를 참고하여 view로 이동
		Controller : Action이라는 인터페이스에서 선언한 execute()라는 추상메소드를 재정의
			   ActionForward라는 필드를 초기화
---------------------------------------------------------------------------------------------
[model2의 전송방식]
	JSP와 Sevlet에서 페이지 이동을 처리할 때 두 가지 방식 중 하나를 사용한다.
	- Redirect
		Web Brower -> 결제 페이지(현재 페이지) -> 새로 고침 -> 결제 페이지(새로운 페이지)
		
		클라이언트가 요청했을 때 【이전의 값이 남아있지 않도록】 하기 위해 사용한다.
		회원가입, 글 작성, 결제 등

		response.sendRedirect(forward.getPath()); 사용

	- Forward
		Web Brower -> 검색 페이지(현재 페이지) -> 검색 결과 페이지(검색한 키워드 값 유지, 전달)

		클라이언트가 【request객체를 통해 값을 넘겨주어야 할 때 혹은 단순 조회를 요청할 때】 사용한다.
		Redirect보다 성능이 좋다.
		목록, 검색

		RequestDispatcher 객체명 = request.getRequestDispatcher(forward.getPath());
		객체명.forward(req, resp); 사용

	다 Forward를 쓰다가 새로운 페이지를 열어야겠다 싶으면 Redirect
		두 개의 차이는 request를 넘겨주느냐(Forward) 안넘겨주느냐(Redirect)의 차이
	※ 전송 방식이 뭔지 모르겠다 싶으면 일단 Forward를 쓰자.
---------------------------------------------------------------------------------------------

※ MyBatis를 쓰기 위해 name은 VO의 이름과 동일하게 만들자
	테이블의 컬럼명, jsp, VO 등

※ contextPath : www.naver.com같이 요청 앞에 반복되는 주소, 절대 경로

※ 내장 객체 out과 PrintWriter out = response.getWriter();는 같다고 볼 수 있지만
	내장 객체 out은 jsp파일이 서블릿으로 변환할 때 웹 컨테이너가 자동으로 메모리에 할당하는 것이라서
	<% %>안에서만 사용할 수 있다.
	.java에서 out을 사용하려면 PrintWriter를 사용해야 한다.