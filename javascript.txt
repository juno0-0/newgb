자바스크립트 언어란?
	1. 퍼즐 조각처럼 코드 형태로 HTML페이지에 내장된다.
	2. 컴파일 과정 없이 브라우저 내부의 인터프리터에 의해 실행된다.
		※ 인터프리터 : 자바스크립트 처리기
		※ 오류 발생 시 브라우저 개발자 모드(F12)의 console에서 확인할 수 있다.
			실행이 되지 않으면 console로 가서 확인해보자.

웹 페이지에서 자바스크립트의 역할
	웹 페이지는 3가지 코드가 결합되어 작성된다.
		※ 3가지 코드 : HTML(정보), CSS(디자인), JS(연산)
	사용자의 입력을 처리하거나 웹 애플리케이션을 작성하는 등
	【웹페이지의 동적 제어에 사용된다.】

	1) 사용자의 입력 및 계산 = 【연산】
		HTML <form>은 입력창(input)만 제공하고
		키보드, 마우스의 입력과 계산은 오직 자바스크립트로만 처리가 가능하다.

	2) 웹 페이지 내용 및 모양의 【동적 제어(DOM, Document Object Model)】
		HTML 태그의 속성이나 콘텐츠, CSS 속성 값을 변경하여
		【웹 페이지에 동적인 변화를 일으키는 데에 활용】된다.

	3) 【브라우저 제어(BOM, Brouser Object Model)】
		브라우저 윈도우의 크기나 모양 변경, 새 윈도우나 탭 열기, 다른 웹사이트 접속,
		브라우저의 히스토리 제어 등 【브라우저의 작동을 제어】하는 데 활용된다.

	4) 【웹 서버와의 통신(Ajax)】
		【웹 페이지가 웹 서버와 데이터를 주고 받을 때 활용】된다.

	5) 【웹 애플리케이션 작성】
		자바스크립트 언어로 활용할 수 있는 많은 API를 제공하므로,
		웹 브라우저에서 실행되는 다양한 웹 애플리케이션을 개발할 수 있다.

자바스크립트 코드의 위치
	1) HTML 태그의 【이벤트 리스너 속성】에 작성
		※ 이벤트 리스너 속성 : onclick, onmouseover 등
		HTML 태그에는 마우스가 클릭되는 등 이벤트가 발생할 때 처리하는 코드를
		등록하는 리스너 속성이 있다.
		이 속성에 자바스크립트 코드를 작성할 수 있다.

	2) 【<script>】 태그 내에 작성
		<script></script>는 <head></head>, <body></body>, <body> 태그 밖 등
		어디든 들어갈 수 있다.
		웹 페이지 내에서 여러 번 작성할 수 있다.

	3) 【자바스크립트 파일】에 작성
		자바스크립트 코드를 확장자가 .js인 별도의 파일로 저장하고,
		<script src=".js경로"></script>를 통해 불러서 사용한다.
			※ <link> 아님!

	4) 【URL 부분】에 작성
		<a> 태그의 href 속성 등에도 자바스크립트 코드를 작성할 수 있다.
			ex) <a href="javascript:alert("메세지")></a>
				※ javascript: 라고 명시적으로 알려줘야 한다.★★★

자바스크립트로 HTML 콘텐츠 출력
	자바스크립트 코드로 HTML 콘텐츠를 웹 페이지에 직접 삽입하여
	브라우저 윈도우에 출력되게 할 수 있다.
	이 때 【document.write()】 or 【document.writeln()】을 사용한다.
		매개값으로 태그도 사용할 수 있다.
			ex) document.write("<h1>hello</h1>");

		매개값으로 받은 문자열을 document가 가리키는 애한테 넣어준다.

		writeln()은 write()에 줄바꿈문자(\n)이 삽입되는데 
			HTML에서 줄바꿈으로 표현되지 않기 때문에 <pre></pre> 태그로 감싸준다.

	※ with( ){ }의 매개값으로 document를 주면 { }안에 작성하는 코드 앞에
		document가 자동으로 붙는다. 

자바스크립트 다이얼로그
	사용자 입력 및 메세지 출력

	1) 프롬프트 다이얼로그
		prompt("메세지", "디폴트 값");

		사용자가 입력한 문자열 값을 리턴,
		아무 값도 입력하지 않으면 ""를 리턴,
		취소 or 강제로 닫으면 null을 리턴

		디폴트 값은 생략이 가능하다.

	2) 확인 다이얼로그
		confirm("메세지");

		확인/취소 버튼을 가진 다이얼로그
		확인은 true, 취소 or 강제로 닫으면 false를 리턴

	3) 경고 다이얼로그
		alert("메세지");

		메세지 출력

	※ history.go(0) : 새로고침
	※ <hr>은 줄 긋기, 자동으로 줄 바꿈도 된다.
	※ Number(값) : 숫자 타입으로 형 변환
	※ .toFixed(자리수) : 소수점 자르기
			  ex) 3.222222.toFixed(2) == 3.22

자바스크립트 데이터 타입과 변수
	1. 자바스크립트 식별자(identifier)
		자바 스크립트 개발자가 변수, 상수, 함수에 붙이는 이름
			변수명 같은 것

		식별자를 만드는 규칙
			1) 첫 번째 문자는 알파벳, 언더바, $문자만 사용 가능
			2) 두 번째 문자부터는 알파벳, 언더바, 0-9, $문자 사용 가능
			3) 대소문자를 구분한다.
				ex) data와 dAta는 다른 식별자
			※ $로 시작되는 식별자는 jQuery 객체를 나타낸다는 의미.

			6variable		(x) 숫자가 맨 앞에 있어서
			student_ID	(o)
			_code		(x) _로 시작할 수 없다.
			if		(x) 키워드를 식별자로 사용할 수 없다.
			%calc		(x) %로 시작할 수 없다.
			bar		(o)

	2. 문장 구분
		세미콜론으로 문장과 문장을 구분한다.
		한 줄에 한 문장만 있는 경우 세미콜론을 생략할 수 있다.

		i = i + 1			(o) 한 줄만 있어서
		i = i + 1;			(o)
		k = k + 1; m = m + 1;	(o) 세미콜론으로 구분해서
		k = k + 1 m = m + 1	(x) 한 줄에 여러 문장이 있을 경우 세미콜론으로 구분한다.
		※ 그냥 항상 찍자★★★

	3. 주석
		// : 한줄 주석
		/* */ : 범위 주석

	4. 데이터 타입
		숫자 타입(Number) : 정수, 실수 다 포함
		논리 타입 : true, false
		문자열 타입 : '안녕', "Hi", ...
			     " "나 ' ' 아무거나 사용 가능
		객체 레퍼런스 타입(Object) : 객체를 가리킴, C언어 포인터와 유사하다.
		undefined, null
			undefined : 타입이 정해지지 않은 것을 의미
				   기본적으로 값이 할당되지 않은 변수는 undefined 타입이며,
					undefined 타입은 변수 자체의 값 또한 undefine가 들어있다.
					ex) var data;
				   초기화되지 않은 변수나, 존재하지 않는 값에 접근할 때 반환된다.★

			null : 값이 정해지지 않은 것을 의미
			       명시적으로 값이 비어있음을 나타낼 때 사용★

	5. 변수
		var 키워드로 변수를 선언한다.
			var score;		// undefined라는 값으로 초기화
			var year, month, day;	// 3개의 변수를 한 번에 선언
			var addredd = "서울시"	// 문자열 타입

		var 키워드 없이 변수를 선언한다.
			age = 20;		// 만약 이미 age가 선언된 변수라면 덮어쓴다.(수정)
			※ var로 변수를 선언하는 것이 명료하고, 실수를 막을 수 있다.
				그냥 전부 var로 선언하자.★★★

		변수의 특징
			타입이 정해진 상태로 할당되지 않기 때문에
			어떠한 타입의 값이라도 하나의 변수에 담을 수 있다.

			var data = 10;
			data = "한동석";
			data = true;

		지역변수와 전역변수
			변수의 사용범위(scope)에 따라서 지역변수(local)와 전역변수(global)로 나뉜다.

			지역 변수 : 함수 안에서 var 키워드로 선언.
				   선언된 함수 내에서만 사용이 가능함

			전역 변수 : 함수 밖에서 선언되거나
				   함수 안에서 var 키워드 없이 선언

			var x;			// 전역 변수
			function f(){
				var y;		// 지역 변수
				x = 10;		// 전역 변수
				y = 10;		// 지역 변수
				z = 10;		// 전역 변수(var없이 선언해서)
			}

		this로 전역 변수 접근
			전역 변수와 지역 변수의 식별자가 같은 경우
			this를 사용하면 전역 변수를 가리킨다.

			var x;			// 전역 변수
			function f(){
				var x;		// 지역 변수
				x = 10;		// 지역 변수
				this.x = 100;	// 전역 변수
			}

			※ this가 어디에서 사용되는지를 잘 봐야한다.
				태그에서 사용되면 this는 태그를 가리킨다.
				함수에서 사용되면 함수가 포함되어 있는 태그를 가리킨다.

		상수
			let : 재할당 가능, 재선언 불가능
			const : 재할당 불가능, 재선언 불가능

			let ex)
				let a = 'test'	// 선언
				let a = 'test2'	// 재선언 불가능
				a = 'test3'	// 재할당 가능
				※ for문을 사용할 때 식별자는 let 타입으로 준다.
					for문은 함수로 인식하지 않기 때문에
					i라는 식별자를 var 타입으로 선언하면
					for문 밖에서도 사용할 수 있어서 변경될 가능성이 있다.

			const ex)
				const a = 'test'	// 선언
				const a = 'test2'	// 재선언 불가능
				a = 'test3'	// 재할당 불가능

			※ console.log() : 관리자모드(F12)의 console창에 매개값을 띄워준다.

자바스크립트의 함수
	function 식별자(매개변수1, 매개변수2, ...){
		코드작성
		return 리턴 값;
	}
	function : 함수라고 선언
	식별자 : 함수명(동사로 작성한다.)
	매개변수 : 여러 개 있을 경우 ","로 분리하고, 생략도 가능하다.
	return : 함수 실행 종료 후 리턴 값을 반환

	※ 매개변수로 함수도 들어갈 수 있다.
		코드작성에서 나온 결과를 매개변수로 받은 함수의 매개변수로 준다.
		이걸 callback 함수라고 부른다.
			※ callback 함수 : 시스템이 사용자에게 처리 요청을 하는 것

자바스크립트의 전역 함수
	Number.parseInt()
		Number.은 생략이 가능하다.
		문자열을 숫자로, 실수를 정수로 변환한다.
			실수를 정수로 변환할 때 소수점 밑으로 아예 없애버리는 것
		ex)
			parseInt("32") === 32
			parseInt(3.14) === 3
			※ === : 타입과 값 모두 같은지 비교하는 것

	isNaN
		is Not a Number
		숫자가 아니면 true, 숫자면 false를 리턴
		NaN은 숫자가 아님을 나타내는 상수 키워드로 사용할 수도 있다.

		isNaN(32)		false
		isNaN("32")	false
		isNaN("hello")	true
		isNaN(NaN)	true
		※ 기본적으로 숫자는 문자로 저장이되고
			isNaN은 그 문자가 숫자로만 이루어졌는지를 판단
			그렇기 때문에 Number 타입만 따로 지정도 가능하다.
			
	isFinite()
		숫자면 true, 숫자가 아니면 false를 리턴

	eval()
		문자열 형태로 수식을 전달받아서 수식을 계산한다.
		ex)
			eval("2*3+4*6") == 30
	
자바스크립트 객체
	객체의 고유한 속성(필드)을 프로퍼티(property)라고 부르며,
	여러 프로퍼티와 값의 쌍으로 표현된다.(Map)
		프로퍼티 : 객체에 소속된 변수
	객체가 호출하는 함수는 메소드라고도 부른다.
		메소드 : 객체에 소속된 함수

	ex) 
		var account = {				account = 객체명
			money : 3000,			{ } 안에 있는게 하나의 객체
			date : "2021-02-10",
			owner : "한동석",
			number : 110-1212-12345,		여기있는 하나하나가 프로퍼티(필드)
			code : "1234",			
			deposit : function(){ ... },		함수의 경우 선언부에 작성된 소스코드가
			withdraw : function(){ ... },		TEXT영역에 저장되고, 그 주소값이 들어가는 것
			show_balance : function(){ ... }	(함수에 이름이 없기 때문에 key에 주소값을 준다.)
		}
	
	※ 객체에서 프로퍼티 가져오기
		.을 이용하는 방식과 ['key']를 이용하는 방식이 있다.
			ex) account.money or account['money']

자바스크립트 객체의 유형
	코어 객체
		Array, Date 타입 등...
		웹 페이지나 웹 서버 응용프로그램 어디서나 사용할 수 있다.
		【코어 객체의 생성은 항상 new 키워드를 사용】한다.
			자바에서 new Array()하면 생성자를 의미하지만,
			자바스크립트에서 new Array()하면 프로토타입이라고 부른다.
				※ 프로토타입은 반드시 첫 글자가 대문자

		배열을 생성하는 방법
			1) var data = [배열에 넣을 값들];
			2) var data = new Array(배열에 넣을 값들);

			※ length로 배열의 길이를 알 수 있지만 길이가 10인 배열에
				배열명.length = 3을 하면 배열의 길이가 3으로 변경되고,
				나머지 값들은 사라진다.

	Data 객체의 주요 메소드
		var 객체명 = new Date();	// 현재 시간을 저장
		객체명.메소드로 값을 얻어온다.
		------------------------------------------------------------
		getFullYear()   : 4자리 년도 리턴
		getMonth()   : 0~11사이의 정수 리턴(0:1월, 1:2월,...)
		getDate()   : 한 달 내의 날짜 리턴(28~31)
		getDay()   : 한 주 내 요일을 정수로 리턴(일요일 : 0,...)
		getHours()   : 0~23사이의 정수 리턴
		getMinutes()   : 0~59사이의 정수 리턴
		getSeconds()   : 0~59사이의 정수 리턴
		getMilliseconds() : 0~999사이의 정수 리턴
		getTime()   : 1970년 1월 1일 0시 0분 0초 기준 현재까지
			     경과된 밀리초 리턴
		------------------------------------------------------------
		setFullYear(year) : 년도 저장
		setMonth(month)   : 월 저장
		setDate(date)   : 한 달 내의 날짜 값 저장
		setHours(hour)   : 시간 저장
		setMinutes(minute) : 분 저장
		setSeconds(second) : 초 저장
		setMilliseconds(ms) : 밀리초 저장
		setTime(t)   : 밀리초 단위인 t 값으로 시간 저장
		------------------------------------------------------------
		toUTCString()   : UTC문자열로 리턴
		toLocaleString() : 로컬 표현의 문자열로 리턴
		toLocaleTimeString() : 로컬 시간 표현

	HTML DOM 객체
		HTML 태그들을 하나씩 객체화 한 것
			<p>안녕</p> ← 하나의 객체
		HTML 페이지의 내용과 모양을 제어하기 위해 사용되는 객체들이다.
		HTML 태그의 포함관계에 따라서 부모 자식 관계로 구성된다.
			<p>
				안녕<span>하세요?</span>
			</p>
			<p>가 부모, <span>이 자식
		HTML에 작성된 코드들을 태그 하나당 하나의 객체로 판단해서 가져온다.
		DOM
		【기본】
		id	 		태그의 id 속성 값			r/w
		lang			태그의 lang 속성 값		r/w
		style			style 객체에 대한 레퍼런스		r/w
		title			태그의 title 속성 값			r/w
		tagName			태그 이름 문자열, 항상 대문자로 표시	r
		innerHTML		시작 태그와 종료 태그 사이의 텍스트	r/w
						※ <input>과 <textarea>는 value를 사용한다.
					innerHTML과 innerText의 차이점
						innerHTML은 태그와 텍스트가 들어감
						innerText는 태그는 제외하고 텍스트만 들어감
		----------------------------------------------------------------------------
		【DOM 트리 관련】
		childElementCount		자식 DOM 개수			r
		firstElementChild		첫 번째 자식 객체			r
		lastElementChild		마지막 자식 객체			r
		nextElementsibling		다음 형제 객체 또는 오른쪽		r
		parentElement		부모 객체				r
		previousElementSibling	이전 형제 객체 또는 왼쪽		r
		----------------------------------------------------------------------------
		【크기와 위치】
		offsetHeight		패딩, 테두리, 스크롤바를 포함한 높이	r
		offsetWidth		패딩, 테두리, 스크롤바를 포함한 너비	r
		offsetLeft			객체의 출력 위치(수평)		r
		offsetTop			객체의 출력 위치(수직)		r
		----------------------------------------------------------------------------
		【컬렉션】
		children			자식 DOM 객체들의 컬렉션		
		----------------------------------------------------------------------------
		【메소드】
		addEventListener()		새로운 이벤트 리스너 등록
		appendChild()		마지막 자식 뒤에 새로운 자식 추가
		click()			사용자가 마우스를 클릭한 것과 동일한 작업 수행
		focus()			키 입력을 받을 수 있도록 이 객체에 포커스 지정
		setAttribute()		속성 추가
		insertBefore()		지정된 자식 앞에 새 자식 추가
		querySelector()		지정된 CSS 선택자와 일치하는 첫 번째 자식 리턴
						【괄호 안에는 CSS선택자를 넣는다】
						(#아이디명, .클래스명)
		querySelectorAll()		지정된 CSS 선택자와 일치하는 모든 자식 리턴★★★
		removeChild()		자식 삭제
		replaceChild()		자식 대체
		removeEventListener()	addEventListener()로 등록한 이벤트 리스너 제거
		getAttribute()		속성 알아내기
		----------------------------------------------------------------------------
		【컬렉션】
		images			문서 내의 모든 <img> 객체
		links			문서 내의 href 속성을 가진 모든 링크 객체
		forms			문서 내의 모든 <form> 객체
		----------------------------------------------------------------------------
		【메소드】
		getElementsByTagName()	주어진 태그 이름을 가진 모든 태그
		getElementsByClassName()	주어진 class 속성 값을 가진 모든 태그
		getElementsByName()	주어진 name 속성 값을 가진 모든 태그
		getElementById()		주어진 id 속성 값을 가진 첫 번째 DOM 객체
						getElementById()로는 id를 복수로 가져올 수 없기 때문에 
						여러 개를 가져와야 할 경우 class를 사용한다.★
						혹은 querySelectorAll() 사용
		addEventListener()		document 객체에 이벤트 리스너 등록
						첫 번째 매개값 : 어떤 이벤트인지?
						두 번째 매개값 : 이벤트가 발생하면 어떤게 실행될 것인지?
						onclick보다는 이걸 더 선호하는 이유
							한 태그에 여러 개의 이벤트를 발생시킬 수 있어서
						※ onclick이 있는 이유
							onclick은 초기부터 제공하던 기능이고 addEventListner는
							그 이후에 나온 기능이라서 IE8 이하에서는 작동을 하지 않음
		close()			HTML콘텐츠를 브라우저에 출력하고, 더 이상 쓰기를 받지 않음
		createElement()		HTML 태그의 동적 생성
		open()			document에 담긴 콘텐츠를 모두 지우고, 
						새로운 HTML 콘텐츠를 쓸 수 있도록 열기
		removeEventListener()	document 객체에 등록된 이벤트 리스너 제거
		write()			document에 HTML 콘텐츠 삽입
		writeln()			write() 후 \n 추가 출력
---------------------------------------------------------------------------------------------------
브라우저 객체 모델(BOM)
	
	자바스크립트를 이용하면 브라우저의 정보에 접근하거나
	브라우저의 여러 기능들을 제어할 수 있다.
	이 때 사용할 수 있는 객체 모델을 브라우저 객체 모델(BOM, Browser Object Model)이라고 한다.
	브라우저 객체 모델은 DOM과 달리 W3C의 표준 객체 모델은 아니다.
		(브라우저마다 다르기 때문에 표준을 만들 수 없다.)
	하지만 자바스크립트가 【브라우저의 기능적인 요소들을 직접 제어하고 관리할 방법을 제공】해준다.
	이러한 BOM 객체들을 전역 객체로 사용할 수 있다.

	window 객체
		【웹 브라우저의 창을 나타내는 객체】로, 대부분의 웹 브라우저에서 지원한다.
		자바 스크립트의 모든 객체, 전역 함수, 전역 변수들은 자동으로 window 객체의 프로퍼티가 되고,
		window 객체의 메소드는 전역 함수, 프로퍼티는 전역 변수가 된다.
		DOM 요소들도 모두 window 객체의 프로퍼티가 된다.

		window.onload = function(){ }
			스크립트 언어는 위에서 아래로 해석되기 때문에 
			DOM에서 HTML 요소를 추출할 때 body보다 위에 있으면 해석 순서에 오류가 생길 수 있다.
			이 경우 자바 스크립트 문서를 밑으로 옮겨야 하는데,
			HTML 문서가 길어지면, 가독성도 좋지 않고 불편할 수 있다.
			따라서 window.onload를 사용하면 문서가 준비된 상황 이후에도 발동시킬 수 있다.

			【function(){ }안에 있는 소스코드를 body가 끝나고 실행한다.】

		window.open()
			window 객체의 open()을 이용하면, 새로운 브라우저 창을 열 수 있으며,
			새로운 브라우저 창의 세부적인 옵션들도 일일이 설정할 수 있다.
	
			var 객체명 = window.open(url, name, specs, replace);
				1) 객체명 : 새로 만들어진 창 객체가 리턴하고, 생성에 실패하면 null을 리턴한다. 
					  이 객체를 통해서 새 창을 제어할 수 있고, 
					  객체명.close();로 창을 닫을 수 있다.
				
				2) url : 주소
			
				3) name
					_blank(default) : 새 창
					_parent : 부모 프레임
					_child : 현재 페이지의 자식 페이지(서브 창)
					_self : 현재 페이지(사용 시 replace를 무시하자.)

				4) specs : 선택적인 값으로 창의 크기, 스크롤 여부, 리사이즈 가능 등의 속성을 지정한다.
						- height=픽셀 : 창의 높이
						- weight=픽셀 : 창의 너비

				5) replace : 히스토리 목록에 새 항목을 만들지, 현재 항목을 대체할 지 지정한다.
						- true : 현재 히스토리 대체(덮어쓰기)
						- false : 히스토리에 새 항목 만들기(히스토리 배열을 1칸 늘리는 것)
		
		window.setTimeout(function(){}, 밀리초);
			밀리초만큼 멈춘 후 function(){}을 실행하는 문법
---------------------------------------------------------------------------------------------------
		location 객체

			현재 브라우저에 표시된 HTML 문서의 주소를 얻거나,
			브라우저에 새 문서를 불러올 때 사용할 수 있다.
			location 객체의 프로퍼티와 메소드를 이용하면,
			현재 문서의 URL 주소를 다양하게 해석하여 처리할 수 있게 된다.

			href : 페이지의 URL 전체 정보 반환, URL을 지정하여 페이지 이동 가능
				1. document.write(location.href);	// 현재 페이지 정보 반환
				2. location.href="주소 or 파일 경로";	// 작성한 경로 페이지로 이동
			
			pathname : URL 경로의 부분 정보를 반환한다.
					※ 부분 정보 : 파일 경로(com이나 net 뒤에 있는 /부터 가져온다.)

			port : 포트 번호를 반환한다.
			
			reload() : 새로고침

			assign() : 현재 URL을 지정한 URL로 바꿔 페이지 이동
				뒤로가기 가능
				href와 기능상 같지만 href가 조금 더 빠르다.
		
			replace() : 현재 URL을 지정한 URL로 바꾸고 이전 페이지로 돌아갈 수 없게 된다.
				  뒤로가기 불가능

			※ assign과 replace
				assign()
					A → B → C
					뒤로가기 시 B로 이동
					히스토리를 만들어서 C를 연 것

				replace()
					A → B → C
					뒤로가기 시 A로 이동
					B를 C로 바꾼 것
---------------------------------------------------------------------------------------------------
		history 객체
			※ history : 페이지 이동을 한 기록
				  배열 형태로 저장이 된다.
					ex) 창을 5개 열었다면 5개의 history가 생성되고,
					     마지막 페이지에서 뒤로가기를 하면 4번째 history로 이동하는 것			

			브라우저의 히스토리 정보를 문서와 문서상태목록으로 저장하는 객체이다.
				앞에 window.이 생략되어 있다.

			go(정수값)	// 정수값은 0부터 시작 
				go(n) : 앞 페이지로 n칸 이동
				go(-n) : 뒤 페이지로 n칸 이동
				back() : 뒤 페이지로 1칸 이동, go(-1)과 같다.
				goForward() : 앞 페이지로 1칸 이동, go(1)과 같다.
			
---------------------------------------------------------------------------------------------------
jQuery
	
	요소들을 선택하는 강력한 방법을 사용하고,
	선택된 요소들을 효율적으로 제어할 수 있는 자바스크립트 라이브러리

	<script src="//code.jquery.com/jquery-3.4.1.min.js"></script>를 추가하여 사용할 수 있다.

	jQuery 기본 문법
		$("선택자")
			아이디 선택자 : $("#아이디명")
			태그 선택자 : $("태그명")
			클래스 선택자 : $(".클래스명")
			속성 선택자 : $("태그명[속성명='속성값']")

		※ 결과가 여러 개면 알아서 컬렉션으로 만들어진다.

		※ 선택자를 넣는 것이라서 공백을 사용하면 부모 자식을 나타낸다.
			ex) $("#food li")	// id가 food인 태그의 자식 <li>

		값 가져오기
			$("선택자").val() : <input>만 사용한다.
			$("선택자").text() : <input>을 제외한 나머지에 사용한다.

		컨텐츠 변경
			$("선택자").text("새로운 값") : <input> 상관 없이 전부 사용

		반복문
			1) $.each(Iterator, function(index, item){
				실행할 문장
			   }

			2) Iterator.forEach(function(element){
				element.프로퍼티
			   }

	※ jQuery를 사용하면 순수 Javascript에 비해 속도가 느리다.
		하지만 간결한 문법으로 인해 개발 속도 증가와 처리비용 감소에 대한 장점이 있으며,
		60% 이상의 웹 사이트에서 사용하고 있기 때문에 적절한 상황에 맞춰서 사용할 줄 알아야 한다.
		까다로운 UI 작업일 경우 상대적으로 무거운 jQuery보다는 
		직접 DOM 스크립트를 사용하기도 한다.

	※ 기본적으로 DOM 접근을 최소화하는 것이 성능상 좋다.

	※ css('속성명', '속성값') : 앞에 jQuery로 가져온 것들의 css를 변경하는 함수
				속성명만 쓰면 속성값을 의미한다.
	
	※ click(function(){}) : 태그를 눌렀을 때 function(){}이 실행된다.

	※ on('이벤트', function(){}) : 이벤트가 발생하면 function(){}이 실행된다.
				ex) $("#test").on('click',function(){});

	※ <input> : val(), value로 값을 가져온다.
			나머지는 text(), innerHTML을 사용한다.

	※ $(document).ready(function(){
		$("#num").on('keydown', function(key){
			if(key.keyCode == 13){
				getResult();
			}
		});
	   });
---------------------------------------------------------------------------------------------------
※ document.write()의 매개변수를 ,로 구분해서 쓰면 이어서 써진다.
	ex) document.write("a","b");
		결과 : ab

※ <script>에서 document.body.style.backgroundColor = 'violet';을 쓰면
	body의 색상이 바뀐다.
	backgroundColor 대신 currentColor를 쓰면 현재 색상을 리턴한다.
		※ document : 현재 파일

※ join() : 매개변수로 받은 구분자를 값 사이사이에 넣는다.★
	default는 ","
		ex) var test = [1, 2, 3, 4]
			test.join("-");
			결과 : 1-2-3-4

※ style.currentColor : 현재 색상을 알려준다.

※ visibility : 영역은 차지하지만 보이지 않게 할 수 있음
   display : 영역도 차지하지 않고 보이지 않게 한다.

※ 배열명.item(index) : 배열에 있는 아이템을 인덱스번호로 가져온다.

※ for(let i in data){ } : data 길이만큼 0부터 증가시킨다.
		    data가 10칸짜리 Colletion이라면 i는 0~9

※ 객체로 직접 접근할 때 함수의 경우 객체명.함수명();으로 접근하고
		       변수의 경우 객체명.prototype.변수명;으로 접근한다.

※ onkeyup : 눌렀다 떼는 순간 실행
   onkeydown : 누르자마자 실행

※ if(window.event.keyCode == 13)이 참이면 Enter를 누른 것

※ outline : 클릭시 테두리

※ visibility와 display 차이점
	visibility는 hidden으로 했을 때 보이지 않지만 자리는 차지하고 있고,
	display는 none으로 했을 때 보이지도 않고 자리도 차지하지 않는다.

※ <form>은 만들자마자 name으로 객체가 생성되고, 각 값이 프로퍼티가 된다.
	ex) <form name="test">
		var test = document.test;

※ <label>의 속성에서 name이 key, value가 value가 된다.

※ <button>은 누르면 바로 <form>의 action으로 이동한다.
	action이 없을 경우 현재 페이지로 이동한다.

※ 소스코드로 페이지 이동을 하는건 응답이다.
	ex) 네이버에서 news를 눌렀을 때 assign이나 replace 등으로 이동시켜주는 것
---------------------------------------------------------------------------------------------------
팸플릿
	※ <noscript></noscript> : 스크립트가 지원되지 않을 경우 여기 있는걸 써라

	※ css를 변경할게 있다면 인라인 스타일로 변경하기(우선순위 때문에)
		그래도 변경되지 않으면 !important를 사용한다.

	※ 스타일은 항상 부모태그까지 가져와서 주어한다.

	※ 경로에 #이라고 써있는 곳이 백엔드 개발자가 작업해야 할 업무이다.
		ex) <form method="post" action="#">

	※ textarea는 공백과 들여쓰기까지 다 인식한다.

	※ 표준 약관 양식
		https://www.ftc.go.kr/www/cop/bbs/selectBoardList.do?key=201&bbsId=BBSMSTR_000000002320&bbsTyCode=BBST01
		https://brunch.co.kr/@seeyeonj/10

	※ 팸플릿
		https://pixelarity.com/

	※ 버튼 가운데 정렬
		<div style="position: relative; text-align: center;"> 
			<button>로그인</button>
		</div>

	※ 가운데 정렬
		1. margin 사용
			margin: 0 auto;
			좌우 여백(left, right)을 사용해서 직접 가운데 정렬
	
		2. text-align 사용(<form>은 안된다.)
			외부요소 : text-align: center;
			내부요소 : inline-block
				  인라인 성격이지만 block의 성격을 가지게 한다.

		3. flexbox
			외부요소
				display: flex;
				justify-content: cent;

	※ <input type="checkbox">가 적용되지 않을 경우
		webkit-appearance: none;
		appearance: none;
			이 두개가 none인지 확인해보자
			만약 none이라면
			<input type="checkbox" style="appearance: button">으로 바꾼다.
---------------------------------------------------------------------------------------------------
포트폴리오
	write에는 팀장명을 적는다.

	개발환경은 버전까지 쓴다.
		ex) JDK8, elipse photon 등

	개발 언어를 추가해서 어떤걸 사용한지 적는다.
		ex) Java, html5, css, Javascript 등

	회원가입에 관한거면 Group Title에 회원가입을 쓰고 Page Title에 확장자까지 써준다.
		ex) Join.jsp

	Summery.  페이지 간략 설명(로그인 페이지, 회원가입 페이지 등)
		밑에는 이 페이지에 대한 설명을 쓴다.
			(다른 페이지로 이동한다. 같은건 그 밑에 쓴다.)
		기능에는 그림에 번호를 붙이고 표에 기능에 대한 설명을 쓴다.
			클릭 시 아이디 찾기 페이지로 이동 합니다(Page.13 참조).
				페이지 참조는 꼭 쓰도록 하자.
			로그인을 하기 위해 ID와 PW를 입력 합니다.

			※ ppt의 번호 이미지가 마음에 들지 않으면
				구글에 번호 이미지를 검색해서 사용하자.

	이미지를 넣을 때는 화면에 맞추려고 억지로 늘려서 이미지가 깨지게 하지 않는다.
		빈공간이 생겨도 괜찮으니 비율을 지키는 선에서 늘리자.
		
	이미지들의 사이즈와 위치는 통일하여 보기 좋게 만들자.

	개발자가 쓰는 단어보다 일반인이 봐도 아는 단어를 쓰자
		어차피 인사담당자가 보는 부분이다.
